package com.safi.db.manager;

import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Properties;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.xmi.XMLResource;
import org.eclipse.emf.ecore.xmi.impl.XMIResourceFactoryImpl;
import org.eclipse.emf.ecore.xmi.impl.XMLResourceImpl;
import org.eclipse.emf.teneo.PersistenceOptions;
import org.eclipse.emf.teneo.hibernate.HbDataStore;
import org.eclipse.emf.teneo.hibernate.HbHelper;
import org.hibernate.HibernateException;
import org.hibernate.SQLQuery;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Environment;
import org.hibernate.criterion.Restrictions;
import org.hibernate.impl.SessionImpl;
import org.hsqldb.Trigger;

import com.safi.db.DBConnection;
import com.safi.db.DBDriver;
import com.safi.db.DBResource;
import com.safi.db.DbFactory;
import com.safi.db.DbPackage;
import com.safi.db.Query;
import com.safi.db.QueryParameter;
import com.safi.db.SafiDriverManager;
import com.safi.db.server.config.AsteriskServer;
import com.safi.db.server.config.ConfigFactory;
import com.safi.db.server.config.ConfigPackage;
import com.safi.db.server.config.Entitlement;
import com.safi.db.server.config.Role;
import com.safi.db.server.config.SafiServer;
import com.safi.db.server.config.Saflet;
import com.safi.db.server.config.SafletProject;
import com.safi.db.server.config.ServerResource;
import com.safi.db.server.config.User;

public class DBManager {

  private final static Logger log = Logger.getLogger(DBManager.class);
  protected final static DBManager instance = new DBManager();
  protected SafiDriverManager defaultDrivers;
  protected SafiDriverManager serverDriverManager;
  protected String username;
  protected String password;
  protected String host;
  protected boolean initialized;
  protected boolean serverMode;
  protected int port = 9001;

  public static DBManager getInstance() {
    return instance;
  }

  private Map<String, Resource> dbResourceTable = new Hashtable<String, Resource>();

  private ResourceSet resourceLoader;
  private HbDataStore dataStore;
  private String serverPort;

  public SafiDriverManager getDriverManagerFromFile(String path) throws IOException {
    Resource m = dbResourceTable.get(path);
    if (m != null)
      return (SafiDriverManager) m.getContents().get(0);

    return loadSafiDriverManager(path);
  }

  // public Resource getDBResource(String path) throws IOException {
  // Resource m = dbResourceTable.get(path);
  // if (m != null)
  // return m;
  // loadSafiDriverManager(path);
  // return dbResourceTable.get(path);
  // }

  public SafiDriverManager getDriverManager() throws DBManagerException {
    if (DBManager.getInstance().isServerMode()) {
      if (serverDriverManager == null) {
        serverDriverManager = getDriverManagerFromDB();
      }
      return serverDriverManager;
    }
    if (dbResourceTable.isEmpty())
      return null;
    Resource r = dbResourceTable.values().toArray(new Resource[1])[0];
    return (SafiDriverManager) r.getContents().get(0);
  }

  public DBConnection getConnectionFromPath(SafiDriverManager manager, String path)
      throws DBManagerException {
    try {
      String[] segs = path.split("\\.");
      return manager.getDriver(segs[0]).getConnection(segs[1]);
    } catch (Exception e) {
      throw new DBManagerException("Couldn't retrieve connection from path " + path, e);
    }
  }

  public Query getQueryFromPath(SafiDriverManager manager, String path) throws DBManagerException {
    try {
      String[] segs = path.split("\\.");
      return manager.getDriver(segs[0]).getConnection(segs[1]).getQuery(segs[2]);
    } catch (Exception e) {
      throw new DBManagerException("Couldn't retrieve connection from path " + path, e);
    }
  }

  public QueryParameter getQueryParamFromPath(SafiDriverManager manager, String path)
      throws DBManagerException {
    try {
      String[] segs = path.split("\\.");
      return manager.getDriver(segs[0]).getConnection(segs[1]).getQuery(segs[2]).getParameter(
          segs[3]);
    } catch (Exception e) {
      throw new DBManagerException("Couldn't retrieve connection from path " + path, e);
    }
  }

  public DBResource getObjectFromPath(SafiDriverManager manager, String path)
      throws DBManagerException {
    try {
      String[] segs = path.split("\\.");
      switch (segs.length) {
        case 1:
          return manager.getDriver(segs[0]);
        case 2:
          return manager.getDriver(segs[0]).getConnection(segs[1]);
        case 3:
          return manager.getDriver(segs[0]).getConnection(segs[1]).getQuery(segs[2]);
        case 4:
          return manager.getDriver(segs[0]).getConnection(segs[1]).getQuery(segs[2]).getParameter(
              segs[3]);
        default:
          return null;
      }
    } catch (Exception e) {
      throw new DBManagerException("Couldn't retrieve connection from path " + path, e);
    }
  }

  public DBResource setDBResourceByPath(SafiDriverManager manager, DBResource resource, String path)
      throws DBManagerException {
    String parentPath;
    DBResource parent = null;
    int idx = path.lastIndexOf('.');
    if (idx >= 0) {
      parentPath = path.substring(0, idx);
      System.err.println("The parent path is " + parentPath);
      parent = getObjectFromPath(manager, parentPath);
      if (parent == null) {
        throw new DBManagerException("Couldn't find parent resource " + parentPath);
      }
    } else
      parent = manager;
    EReference ref = resource.eContainmentFeature();
    @SuppressWarnings("unchecked")
    EList<Object> list = (EList<Object>) parent.eGet(ref);
    DBResource match = null;
    for (Object o : list) {
      DBResource rez = (DBResource) o;
      if (rez.getId() == resource.getId() || rez.getName().equals(resource.getName())) {
        match = rez;
        break;
      }
    }
    if (match != null) {
      if (copyLocalChildren(match, resource))
        list.remove(match);
    }
    parent.eSetDeliver(true);

    // if (parent instanceof DBDriver){
    // ((DBDriver)parent).getConnections().add((DBConnection)resource);
    // }
    // else
    list.add(resource);
    return parent;
  }

  @SuppressWarnings("unchecked")
  private boolean copyLocalChildren(DBResource from, DBResource to) {
    if (from.eContainer() == to.eContainer())
      return false;
    List resources = null;
    if (from instanceof SafiDriverManager)
      resources = ((SafiDriverManager) from).getDrivers();
    else if (from instanceof DBDriver)
      resources = ((DBDriver) from).getConnections();
    else if (from instanceof DBConnection)
      resources = ((DBConnection) from).getQueries();
    else if (from instanceof Query)
      resources = ((Query) from).getParameters();
    else
      return false;

    EReference ref = null;
    List<Object> list = null;
    
    for (Object o : resources) {
      DBResource resource = (DBResource) o;
      if (ref == null) {
        ref = resource.eContainmentFeature();
        list = new ArrayList<Object>((List<Object>) to.eGet(ref));
      }
      list.add(resource);
    }
    return true;
  }

  public boolean saveDriverManagerToFile(String path) throws IOException {
    Resource m = dbResourceTable.get(path);
    if (m != null) {
      m.save(null);
      return true;
    }
    return false;
  }

  public boolean saveDriverManager(SafiDriverManager manager, boolean saveToDB) throws IOException,
      DBResourceException {
    saveSafiDriverManagerToDisk(manager);
    if (!saveToDB)
      return true;

    try {
      Session session = createSession();
      session.beginTransaction();

      session.saveOrUpdate(manager);

      session.getTransaction().commit();
      session.close();

    } catch (Exception e) {
      e.printStackTrace();
      // TODO: handle exception
    }
    return true;
  }

  public Session createSession() throws DBManagerException {
    if (host == null || host.trim().length() == 0 || username == null
        || username.trim().length() == 0)
      throw new DBManagerException(
          "Username or hostname was null.  Please specify server host and username");
    if (dataStore == null) {
      final String dataStoreName = "SafiDBDatastore";
      try {

        String driverName = "org.hsqldb.jdbcDriver";
        String connectionUrl = "jdbc:hsqldb:hsql://" + host + ":" + port + "/safi";
        if (!connectionTest(driverName, connectionUrl))
          throw new DBManagerException("Couldn't connect to DB at " + connectionUrl);
        dataStore = HbHelper.INSTANCE.createRegisterDataStore(dataStoreName);
        final Properties props = new Properties();
        // props.setProperty(Environment.DRIVER, "com.mysql.jdbc.Driver");
        // props.setProperty(Environment.USER, "root");
        // props.setProperty(Environment.PASS, "steely12");
        // props.setProperty(Environment.URL, "jdbc:mysql://127.0.0.1:3306/test");
        // props.setProperty(Environment.DIALECT,
        // org.hibernate.dialect.MySQLInnoDBDialect.class
        // .getName());
        System.err.println("DBManager connecting to db using " + username + " and " + password);

        props.setProperty(Environment.DRIVER, driverName);
        props.setProperty(Environment.USER, username);
        props.setProperty(Environment.PASS, password);

        props.setProperty(Environment.URL, connectionUrl);
        props.setProperty(Environment.DIALECT, org.hibernate.dialect.HSQLDialect.class.getName());
        props.setProperty(PersistenceOptions.INHERITANCE_MAPPING, "TABLE_PER_CLASS");
        // props.setProperty(PersistenceOptions.INHERITANCE_MAPPING, "JOINED");
        // props.setProperty(PersistenceOptions.CASCADE_POLICY_ON_CONTAINMENT,
        // "REMOVE,PERSIST,MERGE,REFRESH");
        props.setProperty(PersistenceOptions.ALWAYS_MAP_LIST_AS_BAG, "true");
        // props.setProperty("SET_PROXY", "false");//does it do anything?
        // props.setProperty(PersistenceOptions.VERSION_COLUMN_NAME, "version");
        props.setProperty(PersistenceOptions.FETCH_CONTAINMENT_EAGERLY, serverMode ? "false"
            : "true");
//        props.setProperty(PersistenceOptions.FETCH_CONTAINMENT_EAGERLY,"false");
//         props.setProperty(PersistenceOptions.ALWAYS_VERSION, "false");
        // props.setProperty(PersistenceOptions.OPTIMISTIC, "false");
        // props.setProperty(PersistenceOptions.SET_CASCADE_ALL_ON_CONTAINMENT, "false");
        // props.setProperty(PersistenceOptions.USE_MAPPING_FILE, "true");
        // Configure the EPackages used by this DataStore.
        dataStore.setEPackages(new EPackage[] { DbPackage.eINSTANCE, ConfigPackage.eINSTANCE });
        dataStore.setProperties(props);
        // Initialize the DataStore. This sets up the Hibernate mapping and
        // creates the corresponding tables in the database.

        dataStore.initialize();
      } catch (Exception e) {
        e.printStackTrace();
        if (dataStore != null) {
          HbHelper.INSTANCE.deRegisterDataStore(dataStoreName);
          try {
            dataStore.close();
          } catch (Exception ignore) {
          }
          dataStore = null;
        }

        throw new DBManagerException("Couldn't create datastore", e);
      }
      String xml = dataStore.getMappingXML();
      System.err.println(xml);
    }
    // if (!dataStore.isInitialized())
    // dataStore.initialize();
    // if (!initialized) {
    // final SessionFactory sessionFactory = dataStore.getSessionFactory();
    // Session session = sessionFactory.openSession();
    // initializeDB(session);
    // }

    final SessionFactory sessionFactory = dataStore.getSessionFactory();
    try {
      Session session = sessionFactory.openSession();
      System.err.println("The session we have is " + session);
      return session;
    } catch (Exception e) {
      throw new DBManagerException(e);
    }
  }

  private void shutdownDatastore() {
    if (dataStore == null)
      return;
    try {
      dataStore.close();
    } catch (Exception e) {
    } finally {
      dataStore = null;
    }
  }

  private boolean connectionTest(String driverName, String connectionUrl) {
    Connection conn = null;
    try {
      Class.forName(driverName);
      conn = DriverManager.getConnection(connectionUrl, username, password);
      return true;
    } catch (Exception e) {
      log.error("Couldn't connect to DB", e);
    } finally {
      if (conn != null)
        try {
          conn.close();
        } catch (Exception e) {
        }
    }
    return false;
  }

  public void addTrigger(Trigger trigger, String tableName, String name) throws DBManagerException {
    Session session = createSession();
    try {
      SQLQuery qry = session.createSQLQuery("CREATE TRIGGER " + name + "_ins AFTER INSERT ON "
          + tableName + " FOR EACH ROW CALL \"" + trigger.getClass().getName() + "\"");
      qry.executeUpdate();
      qry = session.createSQLQuery("CREATE TRIGGER " + name + "_upd AFTER UPDATE ON " + tableName
          + " FOR EACH ROW CALL \"" + trigger.getClass().getName() + "\"");
      qry.executeUpdate();

      qry = session.createSQLQuery("CREATE TRIGGER " + name + "_delbefore BEFORE DELETE ON "
          + tableName + " FOR EACH ROW CALL \"" + trigger.getClass().getName() + "\"");
      qry.executeUpdate();

      qry = session.createSQLQuery("CREATE TRIGGER " + name + "_delafter AFTER DELETE ON "
          + tableName + " FOR EACH ROW CALL \"" + trigger.getClass().getName() + "\"");
      qry.executeUpdate();
    } catch (Exception e) {
      throw new DBManagerException(e);
    } finally {
      session.close();
    }
  }

  public User getUserByUsername(String username) throws DBManagerException {
    Session session = createSession();
    try {
      session.beginTransaction();
      List results = session.createCriteria(User.class).add(Restrictions.eq("name", username))
          .list();
      if (results != null && !results.isEmpty()) {
        return (User) results.get(0);
      }
    } catch (Exception e) {
      throw new DBManagerException(e);
    } finally {
      session.close();
    }

    return null;
  }

  @SuppressWarnings("unchecked")
  public List getUsers() throws DBManagerException {
    Session session = createSession();
    try {
      session.beginTransaction();
      return session.createCriteria(User.class).list();

    } catch (Exception e) {
      throw new DBManagerException(e);
    } finally {
      session.close();
    }
  }

  public void saveOrUpdateUser(User u) throws DBManagerException {
    Session session = createSession();
    try {
      session.beginTransaction();
      
      session.saveOrUpdate(u);
    } catch (Exception e) {
      throw new DBManagerException(e);
    } finally {
      session.close();
    }

  }

  public void saveSafiDriverManagerToDisk(SafiDriverManager manager) throws DBResourceException,
      IOException {
    Resource res = null;
    for (Resource r : dbResourceTable.values()) {
      if (manager == r.getContents().get(0)) {
        res = r;
        break;
      }
    }
    if (res == null)
      throw new DBResourceException("Couldn't find SafiDriverManager");
    res.setModified(true);
    res.save(null);
  }

  public DBResource updateDBResource(SafiDriverManager manager, DBResource resource)
      throws DBManagerException {
    Session session = createSession();
    try {
      System.err.println("The session we have is " + session);
      session.beginTransaction();
      List results = session.createCriteria(resource.getClass()).add(
          resource.getId() == -1 ? Restrictions.eq("name", resource.getName()) : Restrictions.eq(
              "id", resource.getId())).list();
      if (results != null && !results.isEmpty()) {
        DBResource loaded = (DBResource) results.get(0);
        System.err.println("I've updated the resource" + loaded);
        if (loaded == null)
          return null;
        loaded = (DBResource) EcoreUtil.copy(loaded);
//        touchChildren(loaded, new Date());
        return loaded;
      } else
        return null;

    } catch (Exception e) {
      throw new DBManagerException(e);
    } finally {
      session.close();
    }
  }

  // not indictable offense in this case
  public static void touchChildren(DBResource loaded, Date date) {
    for (Iterator<EObject> iter = loaded.eContents().iterator(); iter.hasNext();) {
      EObject next = iter.next();
      if (next instanceof DBResource) {
        DBResource rez = (DBResource) next;
        System.err.println("got childess " + rez.getName() + " of " + loaded.getName());
        // rez.setLastModified(date);
        if (date != null)
          rez.setLastUpdated(date);
        touchChildren(rez, date);
      }
    }
  }

  public DBResource saveDBResource(DBResource resource) throws ResourceModifiedException,
      DBManagerException, DBResourceException {
    Session session = createSession();
    try {
      System.err.println("The session we have is " + session);
      session.beginTransaction();
      session.saveOrUpdate(resource);
      if  (true){
        session.getTransaction().commit();
        return resource;
      }
      
      List results = session.createCriteria(resource.getClass()).add(
          resource.getId() == -1 ? Restrictions.eq("name", resource.getName()) : Restrictions.eq(
              "id", resource.getId())).list();
      DBResource savedResource = null;
      
      if (results != null && !results.isEmpty()) {
        DBResource oldRes = (DBResource) results.get(0);
        if (oldRes != resource && resource.getId()==-1){
          throw new DBResourceException("Resource with name "+resource.getName()+" already exists in the database.  Please select a different name");
        }
        if (oldRes != resource
            && oldRes.getId() == -1
            && oldRes.getLastModified() != null
            && (resource.getLastUpdated() == null || oldRes.getLastModified().after(
                resource.getLastUpdated()))) {
          System.err.println("resource old res lastmod " + oldRes.getLastModified()
              + " but lastUpdated " + resource.getLastUpdated());
          throw new ResourceModifiedException("Resource " + resource.getName()
              + " has been modified on the SafiServer since the last update");
        }
        if (oldRes != resource) {
          copyProperties(oldRes, resource, false);
          System.err.println("After copying i gots " + oldRes);
          // resource = oldRes;

        }
        session.saveOrUpdate(oldRes);
        savedResource = oldRes;

      } else {
        EObject obj = resource.eContainer();
        if (obj != null && obj instanceof DBResource) {
          DBResource parentRes = ((DBResource) obj);
          results = session.createCriteria(obj.getClass()).add(
              parentRes.getId() != -1 ? Restrictions.eq("id", parentRes.getId()) : Restrictions.eq(
                  "name", parentRes.getName())).list();
          boolean wasSaved = false;
          if (results.isEmpty()){ //parent hasn't been persisted
            parentRes = saveDBResource(parentRes);
            wasSaved = true;
            EReference ref = resource.eContainmentFeature();
            @SuppressWarnings("unchecked")
            List<Object> list = (List<Object>) parentRes.eGet(ref);
            for (Object o : list){
              DBResource res = (DBResource)o;
              if (res.getClass().getName().equals(resource.getClass().getName()) && 
                  res.getName().equals(resource.getName())){
                Date now = new Date();
                copyProperties(resource, res, true);
                touchChildren(resource, now);
                resource.setId(res.getId());
                resource.setLastUpdated(now);
                return res;
              }
            }
          }
          else 
            parentRes = (DBResource) results.get(0);
          EReference ref = resource.eContainmentFeature();
          @SuppressWarnings("unchecked")
          List<Object> list = (List<Object>) parentRes.eGet(ref);
          DBResource clonedRes = (DBResource) EcoreUtil.copy(resource);
          list.add(clonedRes);
          session.saveOrUpdate(clonedRes);
          
          savedResource = clonedRes;
          if (!wasSaved)
            session.saveOrUpdate(parentRes);
          // resource.setId(clonedRes.getId());
        } else {
          session.saveOrUpdate(resource);
        }
      }
      session.getTransaction().commit();
      if (savedResource != null)
        resource.setId(savedResource.getId());
      Date now = new Date();
      resource.setLastUpdated(now);
      // resource.setLastModified(now);
      return savedResource;
    } catch (HibernateException e) {
      throw new DBManagerException(e);
    } finally {
      session.close();
    }

  }

  public boolean saveDBResource(SafiDriverManager manager, DBResource resource) throws IOException,
      ResourceModifiedException, DBResourceException, DBManagerException {
    boolean b = saveDBResource(manager, resource, false);
    touchChildren(manager, new Date());
    return b;
  }

  public boolean saveDBResource(SafiDriverManager manager, DBResource resource,
      boolean onlyIfNotPresent) throws IOException, ResourceModifiedException, DBResourceException,
      DBManagerException {

    // saveSafiDriverManagerToDisk(manager);
   

    Session session = createSession();
    try {
      System.err.println("The session we have is " + session);
      session.beginTransaction();
      session.save(resource);
      
      session.getTransaction().commit();
      Date now = new Date();
      resource.setLastUpdated(now);

    } catch (HibernateException e) {
      throw new DBManagerException(e);
    } finally {
      session.close();
    }

    return true;

  }

//  public boolean saveDBResource(SafiDriverManager manager, DBResource resource,
//      boolean onlyIfNotPresent) throws IOException, ResourceModifiedException, DBResourceException,
//      DBManagerException {
//
//    // saveSafiDriverManagerToDisk(manager);
//    if (saveParents(manager, resource)) {
//      Date now = new Date();
//      // resource.setLastModified(now);
//      resource.setLastUpdated(now);
//      return true;
//    }
//
//    Session session = createSession();
//    try {
//      System.err.println("The session we have is " + session);
//      session.beginTransaction();
//      List results = session.createCriteria(resource.getClass()).add(
//          resource.getId() == -1 ? Restrictions.eq("name", resource.getName()) : Restrictions.eq(
//              "id", resource.getId())).list();
//      DBResource savedResource = null;
//      if (results != null && !results.isEmpty()) {
//        if (onlyIfNotPresent) {
//          Date now = new Date();
//          // resource.setLastModified(now);
//          resource.setLastUpdated(now);
//          return false;
//        }
//        DBResource oldRes = (DBResource) results.get(0);
//        if (oldRes != resource
//            && oldRes.getId() == -1
//            && oldRes.getLastModified() != null
//            && (resource.getLastUpdated() == null || oldRes.getLastModified().after(
//                resource.getLastUpdated()))) {
//          System.err.println("resource old res lastmod " + oldRes.getLastModified()
//              + " but lastUpdated " + resource.getLastUpdated());
//          throw new ResourceModifiedException("Resource " + resource.getName()
//              + " has been modified on the SafiServer since the last update");
//        }
//        if (oldRes != resource) {
//          copyProperties(oldRes, resource);
//          System.err.println("After copying i gots " + oldRes);
//          // resource = oldRes;
//
//        }
//        session.saveOrUpdate(oldRes);
//        savedResource = oldRes;
//
//      } else {
//        EObject obj = resource.eContainer();
//        if (obj != null && obj instanceof DBResource) {
//          DBResource parentRes = ((DBResource) obj);
//          results = session.createCriteria(obj.getClass()).add(
//              parentRes.getId() != -1 ? Restrictions.eq("id", parentRes.getId()) : Restrictions.eq(
//                  "name", parentRes.getName())).list();
//          if (results.isEmpty())
//            throw new DBResourceException("Couldn't find or create parent for "
//                + resource.getName());
//          DBResource rez = (DBResource) results.get(0);
//          EReference ref = resource.eContainmentFeature();
//          @SuppressWarnings("unchecked")
//          List<Object> list = (List<Object>) rez.eGet(ref);
//          DBResource clonedRes = (DBResource) EcoreUtil.copy(resource);
//          list.add(clonedRes);
//          session.saveOrUpdate(clonedRes);
//          savedResource = clonedRes;
//          // resource.setId(clonedRes.getId());
//        } else {
//          session.saveOrUpdate(resource);
//        }
//      }
//      session.getTransaction().commit();
//      if (savedResource != null)
//        resource.setId(savedResource.getId());
//      Date now = new Date();
//      resource.setLastUpdated(now);
//      // resource.setLastModified(now);
//
//    } catch (HibernateException e) {
//      throw new DBManagerException(e);
//    } finally {
//      session.close();
//    }
//
//    return true;
//
//  }

  public void deleteDBResource(SafiDriverManager manager, DBResource resource) throws IOException,
      ResourceModifiedException, DBResourceException, DBManagerException {

    deleteChildren(manager, resource);
    Session session = createSession();
    try {
      System.err.println("The session we have is " + session);
      session.beginTransaction();
      EObject obj = resource.eContainer();
      if (obj != null && obj instanceof DBResource) {
        List results = session.createCriteria(obj.getClass()).add(
            Restrictions.eq("name", ((DBResource) obj).getName())).list();
        if (results.isEmpty())
          throw new DBResourceException("Couldn't find parent for " + resource.getName());
        DBResource parentRez = (DBResource) results.get(0);
        EReference ref = resource.eContainmentFeature();
        @SuppressWarnings("unchecked")
        List<Object> list = (List<Object>) parentRez.eGet(ref);
        DBResource persistedRes = null;
        for (Object o : list) {
          if (((DBResource) o).getName().equals(resource.getName())) {
            persistedRes = (DBResource) o;
            break;
          }
        }
        if (persistedRes != null) {
          list.remove(persistedRes);
          session.update(parentRez);
          session.delete(persistedRes);
          session.getTransaction().commit();
        } else
          throw new DBResourceException("Resource " + resource.getName()
              + " couldn't be found on server");
      } else {

        List results = session.createCriteria(resource.getClass()).add(
            Restrictions.eq("name", resource.getName())).list();
        if (results != null && !results.isEmpty()) {
          DBResource oldRes = (DBResource) results.get(0);
          session.delete(oldRes);
          session.getTransaction().commit();
        } else
          throw new DBResourceException("Resource " + resource.getName()
              + " couldn't be found on server");
      }
    } catch (HibernateException e) {
      throw new DBManagerException(e);
    } finally {
      session.close();
    }

    return;

  }

  protected void deleteChildren(SafiDriverManager manager, DBResource resource) throws IOException,
      ResourceModifiedException, DBResourceException, DBManagerException {
    if (resource instanceof Query) {
      List<QueryParameter> params = ((Query) resource).getParameters();
      for (QueryParameter param : params) {
        deleteDBResource(manager, param);
      }
    } else if (resource instanceof DBConnection) {
      List<Query> queries = ((DBConnection) resource).getQueries();
      for (Query q : queries) {
        deleteDBResource(manager, q);
      }
    } else if (resource instanceof DBDriver) {
      List<DBConnection> conns = ((DBDriver) resource).getConnections();
      for (DBConnection conn : conns) {
        deleteDBResource(manager, conn);
      }
    }

  }

  protected boolean saveParents(SafiDriverManager manager, DBResource resource) throws IOException,
      ResourceModifiedException, DBResourceException, DBManagerException {
    DBResource parent = getParentResource(resource);
    if (parent == null)
      return false;
    return saveDBResource(manager, parent, true);
  }

  protected DBResource getParentResource(DBResource resource) {
    EObject obj = resource.eContainer();
    if (obj == null)
      return null;
    if (obj instanceof DBResource)
      return (DBResource) obj;
    return null;
  }

  public void copyProperties(DBResource oldRes, DBResource resource) {
    copyProperties(oldRes, resource, true);
  }

  public void copyProperties(DBResource to, DBResource from, boolean copyChildren) {
    // TODO Auto-generated method stub
    if (to == from ){
      System.err.println("Objects were the same. Ignoring...");
      return;
    }
    to.setName(from.getName());
    if (from.getId() != -1)
      to.setId(from.getId());
    if (to instanceof Query) {
      Query oldQ = (Query) to;
      Query newQ = (Query) from;
      oldQ.setLastModified(newQ.getLastModified());
      oldQ.setLastUpdated(newQ.getLastUpdated());
      oldQ.setQuerySql(newQ.getQuerySql());
      oldQ.setQueryType(newQ.getQueryType());
      oldQ.getParameters().clear();
      for (QueryParameter p : newQ.getParameters()) {
        QueryParameter copy = (QueryParameter) EcoreUtil.copy(p);
        oldQ.getParameters().add(copy);
      }

    } else if (to instanceof DBConnection) {
      DBConnection oldConn = (DBConnection) to;
      DBConnection newConn = (DBConnection) from;
      oldConn.setAcquireIncrement(newConn.getAcquireIncrement());
      oldConn.setLastModified(newConn.getLastModified());
      oldConn.setLastUpdated(newConn.getLastUpdated());
      oldConn.setLoginTimeout(newConn.getLoginTimeout());
      oldConn.setMaxIdleTime(newConn.getMaxIdleTime());
      oldConn.setMaxPoolSize(newConn.getMaxPoolSize());
      oldConn.setMinPoolSize(newConn.getMinPoolSize());
      oldConn.setPassword(newConn.getPassword());
      oldConn.setProperties(newConn.getProperties());
      oldConn.setTransactionMode(newConn.getTransactionMode());
      oldConn.setUrl(newConn.getUrl());
      oldConn.setUser(newConn.getUser());

      if (copyChildren) {
        oldConn.getQueries().clear();
        for (Query q : newConn.getQueries()) {
          oldConn.getQueries().add((Query) EcoreUtil.copy(q));
        }
      }
    } else if (to instanceof DBDriver) {
      DBDriver oldDrv = (DBDriver) to;
      DBDriver newDrv = (DBDriver) from;
      oldDrv.setDefault(newDrv.isDefault());
      oldDrv.setDriverClassName(newDrv.getDriverClassName());
      oldDrv.setExampleUrl(newDrv.getExampleUrl());
      oldDrv.setGuideUrl(newDrv.getGuideUrl());
      oldDrv.setPooling(newDrv.isPooling());
      oldDrv.setWebsiteUrl(newDrv.getWebsiteUrl());

      if (copyChildren) {
        oldDrv.getConnections().clear();
        for (DBConnection c : newDrv.getConnections()) {
          oldDrv.getConnections().add((DBConnection) EcoreUtil.copy(c));
        }
      }
    }
    return;

    // EcoreUtil.replace(resource, oldRes);
  }

  public Saflet getSaflet(String projectName, String safletName) throws DBManagerException {
    Session session = createSession();
    try {
      org.hibernate.Query qry = session
          .createQuery("from com.safi.db.server.config.Saflet saflet where "
              + "saflet.name = :safletName and saflet.project.name = :projectName");
      qry.setString("safletName", safletName);
      qry.setString("projectName", projectName);

      List results = qry.list();
      if (results.isEmpty())
        throw new DBResourceException("Couldn't find saflet " + projectName + "/" + safletName);
      return (Saflet) results.get(0);
    } catch (Exception e) {
      throw new DBManagerException(e);
    } finally {
      session.close();
    }
  }

  public boolean initializeDB(Session session) throws DBManagerException {
    try {
      List results = null;
      try {
        results = session.createCriteria(DBDriver.class).list();
      } catch (Exception e) {
        e.printStackTrace();
      }
      if (results == null || results.isEmpty()) {
        // throw new DBResourceException("Couldn't find parent for " +
        // resource.getName());
        Connection connection = ((SessionImpl) session).getJDBCContext().getConnectionManager()
            .getConnection();
        // DatabaseMetaData meta = connection.getMetaData();
        // ResultSet set = meta.getTables(null, null, "saflet", null);
        // if (!set.next()) {
        Statement stat = connection.createStatement();
        stat.execute("create user 'admin' password 'password' ADMIN;");
        // if (!b) {
        // throw new DBManagerException("Couldn't create default admin user!");
        // }
        session.beginTransaction();
        loadDefaultDrivers();
        SafiDriverManager mgr = DbFactory.eINSTANCE.createSafiDriverManager();
        mgr.setName(defaultDrivers.getName());
//        copyProperties(mgr, defaultDrivers, false);
        session.saveOrUpdate(mgr);
        Date now = new Date();
//        session.flush();
//        session.getTransaction().commit();
//        session.beginTransaction();
        SafiServer server = ConfigFactory.eINSTANCE.createSafiServer();
        server.setName("Default");
        server.setBindIP(this.host);
        
        Role role = ConfigFactory.eINSTANCE.createRole();
        role.setName("Admin");
        role.setDescription("Admin role");
        role.setLastModified(now);
        session.save(role);
        
        Role userRole = ConfigFactory.eINSTANCE.createRole();
        userRole.setName("User");
        userRole.setDescription("User role");
        userRole.setLastModified(now);
        session.save(userRole);
        
        Entitlement entitlement = ConfigFactory.eINSTANCE.createEntitlement();
        entitlement.setName("Saflet(r)");
        entitlement.setDescription("Import privilege for Saflets");
        entitlement.setLastModified(now);
        role.getEntitlements().add(entitlement);
        userRole.getEntitlements().add(entitlement);
        session.save(entitlement);

        entitlement = ConfigFactory.eINSTANCE.createEntitlement();
        entitlement.setName("Saflet(w)");
        entitlement.setDescription("Publish privilege for Saflets");
        entitlement.setLastModified(now);
        role.getEntitlements().add(entitlement);
        session.save(entitlement);

        User user = ConfigFactory.eINSTANCE.createUser();
        user.setName("admin");
        user.setPassword("password");
        user.setFirstname("Admin");
        user.setDescription("Built-in administrative-level password.  "
            + "Use me to create other uses then delete me");

        user.setLastModified(now);
        user.getRoles().add(role);
        server.getUsers().add(user);
        session.save(user);

        user = ConfigFactory.eINSTANCE.createUser();
        user.setName("sa");
        user.setPassword("");
        user.setFirstname("sa");
        user.setDescription("Built-in administrative-level password.  "
            + "Use me to create other uses then delete me");

        user.setLastModified(now);
        user.getRoles().add(role);
        server.getUsers().add(user);
        session.save(user);

        
//        server.setUser(user);
        int portNum = -1;
        try {
          portNum = Integer.parseInt(this.serverPort);
        } catch (Exception ex) {
        }
        if (portNum != -1) {
          server.setPort(portNum);
        }
        server.setDescription("Safi Sever");
        session.save(server);

        session.getTransaction().commit();
        initialized = true;
        return true;
      } else {
        initialized = true;
        return false;
      }

    } catch (Exception e) {
      if (e instanceof DBManagerException)
        throw (DBManagerException) e;
      throw new DBManagerException(e);
    } /*
       * finally { session.close(); }
       */

  }

  public User getUser(String username, String password) throws DBManagerException {
    Session session = createSession();
    try {
      List results = session.createCriteria(User.class).add(Restrictions.eq("name", username)).add(
          Restrictions.eq("password", password)).list();
      if (results.isEmpty())
        throw new DBResourceException("Couldn't find user " + username);
      return (User) results.get(0);
    } catch (Exception e) {
      throw new DBManagerException(e);
    } finally {
      session.close();
    }
  }

  public SafletProject getSafletProject(Integer id) throws DBManagerException {
    Session session = createSession();
    try {
      return (SafletProject) session.createCriteria(SafletProject.class).add(
          Restrictions.eq("id", id)).uniqueResult();
    } catch (Exception e) {
      throw new DBManagerException(e);
    } finally {
      session.close();
    }
  }

  protected ResourceSet getResourceLoader() {

    if (resourceLoader == null) {
      resourceLoader = new ResourceSetImpl();
      // Register XML resource factory
      XMIResourceFactoryImpl resourceFactoryImpl = new XMIResourceFactoryImpl();

      resourceLoader.getResourceFactoryRegistry().getExtensionToFactoryMap().put("*",
          resourceFactoryImpl);
      DbPackage dbPkg = DbPackage.eINSTANCE;
      resourceLoader.getLoadOptions().put(XMLResource.OPTION_RECORD_UNKNOWN_FEATURE, Boolean.TRUE);
    }
    return resourceLoader;
  }

  protected SafiDriverManager loadSafiDriverManager(String path) throws IOException {
    SafiDriverManager safiDriverManager = null;
    File file = new File(path);
    if (file.exists()) {
      URI uri = URI.createFileURI(file.getAbsolutePath());
      unloadSet(getResourceLoader());
      Resource dbResource = getResourceLoader().getResource(uri, true);
      if (dbResource != null) {
        List<EObject> contents = dbResource.getContents();
        if (contents != null && contents.size() >= 1) {
          EObject obj = contents.get(0);
          if (obj instanceof SafiDriverManager) {
            safiDriverManager = (SafiDriverManager) obj;
            dbResourceTable.put(path, dbResource);
          }
        }
      }

    } else {
      if (defaultDrivers == null)
        loadDefaultDrivers();
      URI uri = URI.createFileURI(file.getAbsolutePath());
      Resource r = getResourceLoader().createResource(uri);
      safiDriverManager = (SafiDriverManager) EcoreUtil.copy(defaultDrivers);
      r.getContents().add(safiDriverManager);
      dbResourceTable.put(path, r);
      try {
        r.save(null);
      } catch (IOException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
      }
    }
    // TODO Auto-generated method stub
    return safiDriverManager;
  }

  protected void loadDefaultDrivers() throws IOException {
    XMLResourceImpl res = new XMLResourceImpl();
    DbPackage dbPkg = DbPackage.eINSTANCE;
    Map<String, Object> options = new HashMap<String, Object>();
    options.put(XMLResource.OPTION_RECORD_UNKNOWN_FEATURE, Boolean.TRUE);
    // options.put(XMLResource.OPTION_LAX_FEATURE_PROCESSING, Boolean.TRUE);
    res.doLoad(DBManager.class.getResourceAsStream("/defaultDrivers.db"), options);
    defaultDrivers = (SafiDriverManager) res.getContents().get(0);
    Date now = new Date();
    for (DBDriver d : defaultDrivers.getDrivers()) {
      d.setLastUpdated(now);
    }

  }

  // serverside only
  public SafiDriverManager getDriverManagerFromDB() throws DBManagerException {
    Session session = createSession();
    try {
      
      SafiDriverManager mgr = (SafiDriverManager) session.createCriteria(SafiDriverManager.class).uniqueResult();
//      touchChildren(mgr, null);
      return mgr;
    } catch (Exception e) {
      throw new DBManagerException(e);
    } finally {
      session.close();
    }
  }

  // serverside only
  public synchronized void reloadDriverManagerFromDB() throws DBManagerException {
    Session session = createSession();
    try {
      serverDriverManager = (SafiDriverManager) session.createCriteria(SafiDriverManager.class)
          .uniqueResult();
    } catch (Exception e) {
      throw new DBManagerException(e);
    } finally {
      session.close();
    }
  }

  public SafiServer getSafiServerConfig(Integer id) throws DBManagerException {
    Session session = createSession();
    try {

      if (id >= 0)
        return (SafiServer) session.createCriteria(SafiServer.class).add(Restrictions.eq("id", id))
            .uniqueResult();
      else {
        List results = session.createCriteria(SafiServer.class).list();
        if (results.isEmpty())
          return null;
        return (SafiServer) results.get(0);
      }
    } catch (Exception e) {
      throw new DBManagerException(e);
    } finally {
      session.close();
    }
  }

  public AsteriskServer getAsteriskServerConfig(Integer id) throws DBManagerException {
    Session session = createSession();
    try {
      return (AsteriskServer) session.createCriteria(AsteriskServer.class).add(
          Restrictions.eq("id", id)).uniqueResult();
    } catch (Exception e) {
      throw new DBManagerException(e);
    } finally {
      session.close();
    }
  }

  public AsteriskServer getAsteriskServerConfigByIp(String ip) throws DBManagerException {
    Session session = createSession();
    try {
      return (AsteriskServer) session.createCriteria(AsteriskServer.class).add(
          Restrictions.eq("hostname", ip)).uniqueResult();
    } catch (Exception e) {
      throw new DBManagerException(e);
    } finally {
      session.close();
    }
  }

  public void saveOrUpdateServerResource(ServerResource resource) throws DBManagerException {
    Session session = createSession();
    try {
      session.beginTransaction();
      session.saveOrUpdate(resource);
      session.getTransaction().commit();
    } catch (Exception e) {
      throw new DBManagerException(e);
    } finally {
      session.close();
    }
  }

  protected void unloadSet(ResourceSet resourceLoader) {
    for (Resource r : resourceLoader.getResources()) {
      r.unload();
    }
    resourceLoader.getResources().clear();

  }

  public static String constuctDBResourceId(DBResource resource) {
    if (resource instanceof DBConnection)
      return constructConnectionId((DBConnection) resource);
    if (resource instanceof DBDriver)
      return resource.getName();
    if (resource instanceof Query)
      return constructQueryId((Query) resource);
    if (resource instanceof QueryParameter)
      return constructQueryParamId((QueryParameter) resource);
    return null;
  }

  public static String constructConnectionId(DBConnection conn) {
    StringBuffer buf = new StringBuffer(conn.getDriver().getName());
    buf.append('.').append(conn.getName());
    return buf.toString();
  }

  public static String constructQueryId(Query qry) {
    StringBuffer buf = new StringBuffer(constructConnectionId(qry.getConnection()));
    buf.append('.').append(qry.getName());
    return buf.toString();
  }

  public static String constructQueryParamId(QueryParameter param) {
    StringBuffer buf = new StringBuffer(constructQueryId(param.getQuery()));
    buf.append('.').append(param.getName());
    return buf.toString();
  }

  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    if (StringUtils.equals(this.username, username))
      return;
    this.username = username;
    shutdownDatastore();
  }

  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    if (StringUtils.equals(this.password, password))
      return;
    this.password = password;
    shutdownDatastore();
  }

  public String getHost() {
    return host;
  }

  public void setHost(String host) {
    if (StringUtils.equals(this.host, host))
      return;
    this.host = host;
    shutdownDatastore();
  }

  public boolean isInitialized() {
    return initialized;
  }

  public void setInitialized(boolean initialized) {
    this.initialized = initialized;
  }

  public boolean isServerMode() {
    return serverMode;
  }

  public void setServerMode(boolean serverMode) {
    this.serverMode = serverMode;
  }

  public void setServerPort(String portNumber) {
    // TODO Auto-generated method stub
    this.serverPort = portNumber;
  }

  public int getPort() {
    return port;
  }

  public void setPort(int port) {
    if (this.port == port)
      return;
    this.port = port;
    shutdownDatastore();
  }

}
