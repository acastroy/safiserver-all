/**
 * <copyright>
 * </copyright>
 *
 * $Id: ConfigItemProviderAdapterFactory.java,v 1.6 2008/10/18 08:32:04 zacw Exp $
 */
package com.safi.db.server.config.provider;

import com.safi.db.server.config.util.ConfigAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ConfigItemProviderAdapterFactory extends ConfigAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
  /**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected ComposedAdapterFactory parentAdapterFactory;

  /**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected IChangeNotifier changeNotifier = new ChangeNotifier();

  /**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected Collection<Object> supportedTypes = new ArrayList<Object>();

  /**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public ConfigItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

  /**
	 * This keeps track of the one adapter used for all {@link com.safi.db.server.config.ServerResource} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected ServerResourceItemProvider serverResourceItemProvider;

  /**
	 * This creates an adapter for a {@link com.safi.db.server.config.ServerResource}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createServerResourceAdapter() {
		if (serverResourceItemProvider == null) {
			serverResourceItemProvider = new ServerResourceItemProvider(this);
		}

		return serverResourceItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all {@link com.safi.db.server.config.AsteriskServer} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected AsteriskServerItemProvider asteriskServerItemProvider;

  /**
	 * This creates an adapter for a {@link com.safi.db.server.config.AsteriskServer}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createAsteriskServerAdapter() {
		if (asteriskServerItemProvider == null) {
			asteriskServerItemProvider = new AsteriskServerItemProvider(this);
		}

		return asteriskServerItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all {@link com.safi.db.server.config.SafiServer} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected SafiServerItemProvider safiServerItemProvider;

  /**
	 * This creates an adapter for a {@link com.safi.db.server.config.SafiServer}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createSafiServerAdapter() {
		if (safiServerItemProvider == null) {
			safiServerItemProvider = new SafiServerItemProvider(this);
		}

		return safiServerItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all {@link com.safi.db.server.config.Role} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected RoleItemProvider roleItemProvider;

  /**
	 * This creates an adapter for a {@link com.safi.db.server.config.Role}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createRoleAdapter() {
		if (roleItemProvider == null) {
			roleItemProvider = new RoleItemProvider(this);
		}

		return roleItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all {@link com.safi.db.server.config.Entitlement} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected EntitlementItemProvider entitlementItemProvider;

  /**
	 * This creates an adapter for a {@link com.safi.db.server.config.Entitlement}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createEntitlementAdapter() {
		if (entitlementItemProvider == null) {
			entitlementItemProvider = new EntitlementItemProvider(this);
		}

		return entitlementItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all {@link com.safi.db.server.config.User} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected UserItemProvider userItemProvider;

  /**
	 * This creates an adapter for a {@link com.safi.db.server.config.User}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createUserAdapter() {
		if (userItemProvider == null) {
			userItemProvider = new UserItemProvider(this);
		}

		return userItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all {@link com.safi.db.server.config.Saflet} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected SafletItemProvider safletItemProvider;

  /**
	 * This creates an adapter for a {@link com.safi.db.server.config.Saflet}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createSafletAdapter() {
		if (safletItemProvider == null) {
			safletItemProvider = new SafletItemProvider(this);
		}

		return safletItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all {@link com.safi.db.server.config.SafletProject} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected SafletProjectItemProvider safletProjectItemProvider;

  /**
	 * This creates an adapter for a {@link com.safi.db.server.config.SafletProject}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createSafletProjectAdapter() {
		if (safletProjectItemProvider == null) {
			safletProjectItemProvider = new SafletProjectItemProvider(this);
		}

		return safletProjectItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all {@link com.safi.db.server.config.Prompt} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected PromptItemProvider promptItemProvider;

  /**
	 * This creates an adapter for a {@link com.safi.db.server.config.Prompt}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createPromptAdapter() {
		if (promptItemProvider == null) {
			promptItemProvider = new PromptItemProvider(this);
		}

		return promptItemProvider;
	}

  /**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

  /**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

  /**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

  /**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

  /**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

  /**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

  /**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public void dispose() {
		if (serverResourceItemProvider != null) serverResourceItemProvider.dispose();
		if (asteriskServerItemProvider != null) asteriskServerItemProvider.dispose();
		if (safiServerItemProvider != null) safiServerItemProvider.dispose();
		if (roleItemProvider != null) roleItemProvider.dispose();
		if (entitlementItemProvider != null) entitlementItemProvider.dispose();
		if (userItemProvider != null) userItemProvider.dispose();
		if (safletItemProvider != null) safletItemProvider.dispose();
		if (safletProjectItemProvider != null) safletProjectItemProvider.dispose();
		if (promptItemProvider != null) promptItemProvider.dispose();
	}

}
