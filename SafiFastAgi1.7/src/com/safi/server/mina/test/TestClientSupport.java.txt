package com.safi.server.mina.test;

import java.net.InetSocketAddress;
import java.net.SocketAddress;

import javax.net.ssl.SSLContext;

import org.apache.mina.common.ConnectFuture;
import org.apache.mina.common.IoHandler;
import org.apache.mina.common.IoSession;
import org.apache.mina.example.chat.client.ChatClientSupport;
import org.apache.mina.example.chat.client.SwingChatClient;
import org.apache.mina.example.chat.client.SwingChatClientHandler;
import org.apache.mina.example.echoserver.ssl.BogusSSLContextFactory;
import org.apache.mina.filter.SSLFilter;
import org.apache.mina.filter.codec.ProtocolCodecFilter;
import org.apache.mina.filter.codec.textline.TextLineCodecFactory;
import org.apache.mina.transport.socket.nio.SocketConnector;
import org.apache.mina.transport.socket.nio.SocketConnectorConfig;

public class TestClientSupport {
	private final IoHandler handler;

	private final String name;

	private IoSession session;

	public TestClientSupport(String name, IoHandler handler) {

		if (name == null) {
			throw new IllegalArgumentException("Name can not be null");
		}
		this.name = name;

		this.handler = handler;
	}

	public boolean connect(SocketConnector connector, SocketAddress address) {
		if (session != null && session.isConnected()) {
			throw new IllegalStateException(
					"Already connected. Disconnect first.");
		}

		try {

			SocketConnectorConfig config = new SocketConnectorConfig();
			config.getSessionConfig().setTcpNoDelay(true);
			config.getFilterChain().addLast("codec",
					new ProtocolCodecFilter(new TextLineCodecFactory()));
			ConnectFuture future1 = connector.connect(address, handler, config);
			future1.join();
			if (!future1.isConnected()) {
				return false;
			}
			session = future1.getSession();

			// session.write("LOGIN " + name);
			return true;
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
	}

	public static void main(String[] args) {
		for (int i = 0; i < 1; i++) {
			SocketConnector connector = new SocketConnector();
			SafletTestHandler handler = new SafletTestHandler("test"+i);
			TestClientSupport client = new TestClientSupport("test" + i,
					handler);
			InetSocketAddress address = new InetSocketAddress("128.223.243.171",
					4573);
			client.connect(connector, address);
//			try {
//				Thread.currentThread().sleep(1000);
//			} catch (InterruptedException e) {
//				// TODO Auto-generated catch block
//				e.printStackTrace();
//			}
		}
	}
}
