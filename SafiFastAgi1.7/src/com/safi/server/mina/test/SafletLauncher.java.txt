package com.safi.server.mina.test;

import java.net.SocketAddress;

import javax.net.ssl.SSLContext;

import org.apache.mina.common.ConnectFuture;
import org.apache.mina.common.IoHandler;
import org.apache.mina.common.IoSession;
import org.apache.mina.example.echoserver.ssl.BogusSSLContextFactory;
import org.apache.mina.filter.SSLFilter;
import org.apache.mina.transport.socket.nio.SocketConnector;
import org.apache.mina.transport.socket.nio.SocketConnectorConfig;

public class SafletLauncher {
	
	 private final IoHandler handler;

	    private final String name;

	    private IoSession session;

	    public SafletLauncher(String name, IoHandler handler) {
	        if (name == null) {
	            throw new IllegalArgumentException("Name can not be null");
	        }
	        this.name = name;
	        this.handler = handler;
	    }

	    public boolean connect(SocketConnector connector, SocketAddress address,
	            boolean useSsl) {
	        if (session != null && session.isConnected()) {
	            throw new IllegalStateException(
	                    "Already connected. Disconnect first.");
	        }

	        try {

	            SocketConnectorConfig config = new SocketConnectorConfig();
	            if (useSsl) {
	                SSLContext sslContext = BogusSSLContextFactory
	                        .getInstance(false);
	                SSLFilter sslFilter = new SSLFilter(sslContext);
	                sslFilter.setUseClientMode(true);
	                config.getFilterChain().addLast("sslFilter", sslFilter);
	            }

	            ConnectFuture future1 = connector.connect(address, handler, config);
	            future1.join();
	            if (!future1.isConnected()) {
	                return false;
	            }
	            session = future1.getSession();
	            session.write("LOGIN " + name);
	            return true;
	        } catch (Exception e) {
	            e.printStackTrace();
	            return false;
	        }
	    }

	    public void broadcast(String message) {
	        session.write("BROADCAST " + message);
	    }

	    public void quit() {
	        if (session != null) {
	            if (session.isConnected()) {
	                session.write("QUIT");
	                // Wait until the chat ends.
	                session.getCloseFuture().join();
	            }
	            session.close();
	        }
	    }
}
