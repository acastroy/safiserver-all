<?xml version="1.0" encoding="UTF-8"?>
<objects group="ecma_basic">
	<object name="Object">
		<documentation><![CDATA[
Summary
Creates an object wrapper.

Syntax
new Object( [ value ] );

Parameters
value
Any value.
Description
The Object constructor creates an object wrapper for the given value. If the value is null or undefined, it will create and return an empty object, otherwise, it will return an object of type that corresponds to the given value.

When called in a non-constructor context, Object behaves identically. 

Examples
Example: Using Object given undefined and null types
The following examples return an empty Object object:

var o = new Object();
o = new Object(undefined);
o = new Object(null);
Example: Using Object to create Boolean objects
The following examples return Boolean objects:

o = new Object(true);      // equivalent to o = new Boolean(true);
o = new Object(Boolean()); // equivalent to o = new Boolean(false);]]></documentation>
		<method name="hasOwnProperty" return-type="Boolean">
			<documentation><![CDATA[
Summary
Returns a boolean indicating whether the object has the specified property.

Syntax
hasOwnProperty(prop);

Parameters
prop 
The name of the property to test.
Description
Every object descended from Object inherits the hasOwnProperty method. This method can be used to determine whether an object has the specified property as a direct property of that object; unlike the in operator, this method does not check down the object's prototype chain.

Examples
Example: Using hasOwnProperty to test for a property's existence
The following example determines whether the o object contains a property named prop:

o = new Object();
o.prop = 'exists';

function changeO() {
  o.newprop = o.prop;
  delete o.prop;
}

o.hasOwnProperty('prop');   //returns true
changeO();
o.hasOwnProperty('prop');   //returns false
Example: Direct versus inherited properties
The following example differentiates between direct properties and properties inherited through the prototype chain:

o = new Object();
o.prop = 'exists';
o.hasOwnProperty('prop');             // returns true
o.hasOwnProperty('toString');         // returns false
o.hasOwnProperty('hasOwnProperty');   // returns false
 ]]></documentation>
		</method>
		<method name="isPrototypeOf" return-type="Boolean">
			<documentation><![CDATA[
Summary
Allows checks for an object in another object's prototype chain.

Syntax
prototype.isPrototypeOf(object);

Parameters
prototype
the object likely to be present in the prototype chain of the object given in the second parameter
Note: isPrototypeOf is differs from the instanceof operator by requiring that the object from which you are calling the method be the actual object to compare against, whereas instanceof checks against the prototype of its second parameter.

object
the object in question whose prototype chain will be searched
Description
isPrototypeOf allows you to check whether or not an object exists within another object's prototype chain.

For example, consider the following prototype chain:

function Fee() {
  . . .
}

function Fi() {
  . . .
}
Fi.prototype = new Fee();

function Fo() {
  . . .
}
Fo.prototype = new Fi();

function Fum() {
  . . .
}
Fum.prototype = new Fo();
Later on down the road, if you instantiate Fum and need to check if Fi's prototype exists within the Fum prototype chain, you could do this:

var fum = new Fum();
. . .

if (Fi.prototype.isPrototypeOf(fum)) {
  // do something safe
}
This, along with the instanceof operator particularly comes in handy if you have code that can only function when dealing with objects descended from a specific prototype chain, e.g., to guarantee that certain methods or properties will be present on that object.
 ]]></documentation>
		</method>
		<method name="propertyIsEnumerable" return-type="Boolean">
			<documentation><![CDATA[
Summary
Returns a boolean indicating whether the specified property is enumerable.

Syntax
obj.propertyIsEnumerable(prop);

Parameters
prop 
The name of the property to test.
Description
Every object has a propertyIsEnumerable method. This method can determine whether the specified property in an object can be enumerated by a for...in loop, with the exception of properties inherited through the prototype chain. If the object does not have the specified property, this method returns false.

Examples
Example: A basic use of propertyIsEnumerable
The following example shows the use of propertyIsEnumerable on objects and arrays:

var o = {};
var a = [];
o.prop = 'is enumerable';
a[0] = 'is enumerable';

o.propertyIsEnumerable('prop');   // returns true
a.propertyIsEnumerable(0);        // returns true
Example: User-defined versus built-in objects
The following example demonstrates the enumerability of user-defined versus built-in properties:

var a = ['is enumerable'];

a.propertyIsEnumerable(0);          // returns true
a.propertyIsEnumerable('length');   // returns false

Math.propertyIsEnumerable('random');   // returns false
this.propertyIsEnumerable('Math');     // returns false
Example: Direct versus inherited properties
var a = [];
a.propertyIsEnumerable('constructor');         // returns false

function firstConstructor()
{
  this.property = 'is not enumerable';
}

function secondConstructor()
{
  this.method = function method() { return 'is enumerable'; };
}

secondConstructor.prototype = new firstConstructor;

var o = new secondConstructor();
o.arbitraryProperty = 'is enumerable';

o.propertyIsEnumerable('arbitraryProperty');   // returns true
o.propertyIsEnumerable('method');              // returns true
o.propertyIsEnumerable('property');            // returns false

o.property = 'is enumerable';

o.propertyIsEnumerable('property');            // returns true
See also
for...in
]]></documentation>
		</method>
		<method name="toString" return-type="String">
			<documentation><![CDATA[
Summary
Returns a string representing the object.

Syntax
object.toString();

Description
Every object has a toString method that is automatically called when the object is to be represented as a text value or when an object is referred to in a manner in which a string is expected. By default, the toString method is inherited by every object descended from Object. If this method is not overridden in a custom object, toString returns [object type], where type is the object type. The following code illustrates this:

var o = new Object();
o.toString();           // returns [object Object]

Examples
Overriding the default toString method
You can create a function to be called in place of the default toString method. The toString method takes no arguments and should return a string. The toString method you create can be any value you want, but it will be most useful if it carries information about the object.

The following code defines the Dog object type and creates theDog, an object of type Dog:

function Dog(name,breed,color,sex) {
   this.name=name;
   this.breed=breed;
   this.color=color;
   this.sex=sex;
}

theDog = new Dog("Gabby","Lab","chocolate","female");
If you call the toString method on this custom object, it returns the default value inherited from Object:

theDog.toString(); //returns [object Object]
The following code creates and assigns dogToString to override the default toString method. This function generates a string containing the name, breed, color, and sex of the object, in the form "property = value;".

Dog.prototype.toString = function dogToString() {
  var ret = "Dog " + this.name + " is a " + this.sex + " " + this.color + " " + this.breed;
  return ret;
}
With the preceding code in place, any time theDog is used in a string context, JavaScript automatically calls the dogToString function, which returns the following string:

Dog Gabby is a female chocolate Lab

]]></documentation>
		</method>
		<method name="toLocaleString" return-type="String">
			<documentation><![CDATA[
Summary

Returns a string representing the object. This method is meant to be overriden by derived objects for locale-specific purposes.
Syntax
toLocaleString();

Parameters
None.

Description
Object's toLocaleString returns the result of calling toString.

This function is provided to give objects a generic toLocaleString method, even though not all may use it. Currently, only Array, Number, and Date override toLocaleString.
]]></documentation>
		</method>
		<method name="valueOf" return-type="Object">
			<documentation><![CDATA[
Summary
Returns the primitive value of the specified object

Syntax
valueOf();

Parameters
None.

Description
JavaScript calls the valueOf method to convert an object to a primitive value. You rarely need to invoke the valueOf method yourself; JavaScript automatically invokes it when encountering an object where a primitive value is expected.

By default, the valueOf method is inherited by every object descended from Object. Every built-in core object overrides this method to return an appropriate value. If an object has no primitive value, valueOf returns the object itself, which is displayed as:

[object Object]
You can use valueOf within your own code to convert a built-in object into a primitive value. When you create a custom object, you can override Object.valueOf to call a custom method instead of the default Object method.

Overriding valueOf for custom objects
You can create a function to be called in place of the default valueOf method. Your function must take no arguments.

Suppose you have an object type myNumberType and you want to create a valueOf method for it. The following code assigns a user-defined function to the object's valueOf method:

myNumberType.prototype.valueOf = new Function(functionText)
With the preceding code in place, any time an object of type myNumberType is used in a context where it is to be represented as a primitive value, JavaScript automatically calls the function defined in the preceding code.

An object's valueOf method is usually invoked by JavaScript, but you can invoke it yourself as follows:

myNumber.valueOf()
Note
Objects in string contexts convert via the toString method, which is different from String objects converting to string primitives using valueOf. All string objects have a string conversion, if only "[object type]". But many objects do not convert to number, boolean, or function.
]]></documentation>
		</method>
	</object>
	<object name="Function">
		<documentation><![CDATA[
Summary
Every function in JavaScript is actually a Function object.

Syntax
new Function ([arg1[, arg2[, ... argN]],] functionBody);

Parameters
arg1, arg2, ... argN
Names to be used by the function as formal argument names. Each must be a string that corresponds to a valid JavaScript identifier or a list of such strings separated with a comma; for example "x", "theValue", or "a,b".
functionBody
A string containing the JavaScript statements comprising the function definition.
Description
Function objects created with the Function constructor are evaluated each time they are used. This is less efficient than declaring a function and calling it within your code, because declared functions are parsed only once.

All arguments passed to the function are treated as the names of the identifiers of the parameters in the function to be created, in the order in which they are passed.

Invoking the Function constructor as a function (without using the new operator) has the same effect as invoking it as a constructor.

Examples
Example: Specifying arguments with the Function constructor
The following code creates a Function object that takes two arguments.

var multiply = new Function("x", "y", "return x * y");
var theAnswer = multiply(7, 6);
The arguments "x" and "y" are formal argument names that are used in the function body, "return x * y".
]]></documentation>
		<property type="Number" name="length" static="false">
			<documentation><![CDATA[
Summary
Specifies the number of arguments expected by the function.

Description
length is external to a function, and indicates how many arguments the function expects, i.e. the number of formal parameters. By contrast, arguments.length is local to a function and provides the number of arguments actually passed to the function.

Examples
Example: Using Function.length and arguments.length
The following example demonstrates the use of Function.length and arguments.length.

function addNumbers(x, y){
   if (arguments.length == addNumbers.length) {
      return (x + y);
   }
   else
      return 0;
}
If you pass more than two arguments to this function, the function returns 0:

addNumbers(3,4,5);   // returns 0
addNumbers(3,4);     // returns 7
addNumbers(103,104); // returns 207            
]]></documentation>
		</property>
		<method name="call" return-type="VOID">
			<params>
				<parameter name="thisArg" type="Any" optional="false"><![CDATA[             ]]></parameter>
				<parameter name="argsArray" type="Object[]" optional="false"><![CDATA[             ]]></parameter>
			</params>
			<documentation><![CDATA[
Summary
Allows you to call (execute) a method of another object in the context of a different object (the calling object).

Syntax
var result = fun.call(thisArg[, arg1[, arg2[, ...]]]);
Parameters
thisArg 
Determines the value of this inside fun. If thisArg is null or undefined, this will be the global object. Otherwise, this will be equal to Object(thisArg) (which is thisArg if thisArg is already an object, or a String, Boolean, or Number if thisArg is a primitive value of the corresponding type). Therefore, it is always true that typeof this == "object" when the function executes.
arg1, arg2, ... 
Arguments for the object.
Description
You can assign a different this object when calling an existing function. this refers to the current object, the calling object.

With call, you can write a method once and then inherit it in another object, without having to rewrite the method for the new object.

Examples
Example: Using call to chain constructors for an object
You can use call to chain constructors for an object, similar to Java. In the following example, the constructor for the product object is defined with two parameters, name and value. Another object, prod_dept, initializes its unique variable (dept) and calls the constructor for product in its constructor to initialize the other variables.

function product(name, value){
   this.name = name;
   if(value >= 1000)
      this.value = 999;
   else
      this.value = value;
}

function prod_dept(name, value, dept){
   this.dept = dept;
   product.call(this, name, value);
}

prod_dept.prototype = new product();

// since 5 is less than 1000, value is set
cheese = new prod_dept("feta", 5, "food");

// since 5000 is above 1000, value will be 999
car = new prod_dept("honda", 5000, "auto");
]]></documentation>
		</method>
		<method name="apply" return-type="VOID">
			<params>
				<parameter name="thisArg" type="Any" optional="false"><![CDATA[             ]]></parameter>
				<parameter name="argsArray" type="Object[]" optional="false"><![CDATA[             ]]></parameter>
			</params>
			<documentation><![CDATA[
Summary
Allows you to apply a method of another object in the context of a different object (the calling object).

Syntax
var result = function.apply(thisArg[, argsArray]);

Parameters
thisArg 
Determines the value of this inside fun. If thisArg is null or undefined, this will be the global object. Otherwise, this will be equal to Object(thisArg) (which is thisArg if thisArg is already an object, or a String, Boolean, or Number if thisArg is a primitive value of the corresponding type). Therefore, it is always true that typeof this == "object" when the function executes.
argsArray 
An argument array for the object, specifying the arguments with which fun should be called, or null or undefined if no arguments should be provided to the function.
Description
You can assign a different this object when calling an existing function. this refers to the current object, the calling object. With apply, you can write a method once and then inherit it in another object, without having to rewrite the method for the new object.

apply is very similar to call, except for the type of arguments it supports. You can use an arguments array instead of a named set of parameters. With apply, you can use an array literal, for example, fun.apply(this, [name, value]), or an Array object, for example, fun.apply(this, new Array(name, value)).

You can also use arguments for the argArray parameter. arguments is a local variable of a function. It can be used for all unspecified arguments of the called object. Thus, you do not have to know the arguments of the called object when you use the apply method. You can use arguments to pass all the arguments to the called object. The called object is then responsible for handling the arguments.

Examples
Example: Using apply to chain constructors
You can use apply to chain constructors for an object, similar to Java. In the following example, the constructor for the product object is defined with two parameters, name and value. Another object, prod_dept, initializes its unique variable (dept) and calls the constructor for product in its constructor to initialize the other variables. In this example, the parameter arguments is used for all arguments of the product object's constructor.

function product(name, value)
{
  this.name = name;
  if (value > 1000)
    this.value = 999;
  else
    this.value = value;
}

function prod_dept(name, value, dept)
{
  this.dept = dept;
  product.apply(this, arguments);
}
prod_dept.prototype = new product();

// since 5 is less than 1000 value is set
var cheese = new prod_dept("feta", 5, "food");

// since 5000 is above 1000, value will be 999
var car = new prod_dept("honda", 5000, "auto");
]]></documentation>
		</method>
		<method name="toString" return-type="String">
			<documentation><![CDATA[
Summary
Returns a string representing the source code of the function.

Syntax
object.toString();

Parameters
None.

Description
The Function object overrides the toString method of the Object object; it does not inherit Object.toString. For Function objects, the toString method returns a string representation of the object.

JavaScript calls the toString method automatically when a Function is to be represented as a text value or when a Function is referred to in a string concatenation.

For Function objects, the built-in toString method decompiles the function back into the JavaScript source that defines the function. This string includes the function keyword, the argument list, curly braces, and function body.

For example, assume you have the following code that defines the Dog object type and creates theDog, an object of type Dog:

function Dog(name,breed,color,sex) {
   this.name=name;
   this.breed=breed;
   this.color=color;
   this.sex=sex;
}

theDog = new Dog("Gabby","Lab","chocolate","girl");
Any time Dog is used in a string context, JavaScript automatically calls the toString function, which returns the following string:

function Dog(name, breed, color, sex) {
  this.name = name;
  this.breed = breed;
  this.color = color;
  this.sex = sex;
}
]]></documentation>
		</method>
	</object>
	<object name="Number">
		<documentation><![CDATA[
Summary
Creates a wrapper object to allow you to work with numerical values.

Syntax
new Number(value);

Parameters
value
The numeric value of the object being created.
Description
The primary uses for the Number object are:

If the argument cannot be converted into a number, it returns Nan.

In a non-constructor context (i.e., without the new operator), Number can be used to perform a type conversion.

Examples
Example: Using the Number object to assign values to numeric variables
The following example uses the Number object's properties to assign values to several numeric variables:

var biggestNum = Number.MAX_VALUE;
var smallestNum = Number.MIN_VALUE;
var infiniteNum = Number.POSITIVE_INFINITY;
var negInfiniteNum = Number.NEGATIVE_INFINITY;
var notANum = Number.NaN;

Example: Using Number to convert a Date object
The following example converts the Date object to a numerical value using Number as a function:

var d = new Date("December 17, 1995 03:24:00");
print(Number(d));
This displays "819199440000".       ]]></documentation>
		<property type="Number" name="MAX_VALUE" static="true">
			<documentation><![CDATA[The largest representable number.            ]]></documentation>
		</property>
		<property type="Number" name="MIN_VALUE" static="true">
			<documentation><![CDATA[The smallest representable number.            ]]></documentation>
		</property>
		<property type="Number" name="NaN" static="true">
			<documentation><![CDATA[Special "not a number" value.            ]]></documentation>
		</property>
		<property type="Number" name="NEGATIVE_INFINITY" static="true">
			<documentation><![CDATA[Special value representing negative infinity; returned on overflow.            ]]></documentation>
		</property>
		<property type="Number" name="POSITIVE_INFINITY" static="true">
			<documentation><![CDATA[Special value representing infinity; returned on overflow.            ]]></documentation>
		</property>
	</object>
	<object name="Boolean">
		<documentation><![CDATA[ 
Summary
The Boolean object is an object wrapper for a boolean value.

Syntax
new Boolean(value);

Parameters
value 
The initial value of the Boolean object.
Description
The value passed as the first parameter is converted to a boolean value, if necessary. If value is omitted or is 0, -0, null, false, NaN, undefined, or the empty string (""), the object has an initial value of false. All other values, including any object or the string "false", create an object with an initial value of true.

Do not confuse the primitive Boolean values true and false with the true and false values of the Boolean object.

Any object whose value is not undefined or null, including a Boolean object whose value is false, evaluates to true when passed to a conditional statement. For example, the condition in the following if statement evaluates to true:

x = new Boolean(false);
if (x) {
  // . . . this code is executed
}
This behavior does not apply to Boolean primitives. For example, the condition in the following if statement evaluates to false:

x = false;
if (x) {
  // . . . this code is not executed
}
Do not use a Boolean object to convert a non-boolean value to a boolean value. Instead, use Boolean as a function to perform this task:

x = Boolean(expression);     // preferred
x = new Boolean(expression); // don't use
If you specify any object, including a Boolean object whose value is false, as the initial value of a Boolean object, the new Boolean object has a value of true.

myFalse = new Boolean(false);   // initial value of false
g = new Boolean(myFalse);       // initial value of true
myString = new String("Hello"); // string object
s = new Boolean(myString);      // initial value of true      
]]></documentation>
		<method name="toSource" return-type="String">
			<documentation><![CDATA[
Summary
Returns a string representing the source code of the object.

Syntax
boolean.toSource();

Parameters
None.

Description
The toSource method returns the following values:

For the built-in Boolean object, toSource returns the following string indicating that the source code is not available:
function Boolean() {
   [native code]
}
For instances of Boolean, toSource returns a string representing the source code.
This method is usually called internally by JavaScript and not explicitly in code. 
]]></documentation>
		</method>
		<method name="toString" return-type="String">
			<documentation><![CDATA[
Summary
Returns a string representing the specified Boolean object.

Syntax
toString();

Parameters
None.

Description
The Boolean object overrides the toString method of the Object object; it does not inherit Object.toString. For Boolean objects, the toString method returns a string representation of the object.

JavaScript calls the toString method automatically when a Boolean is to be represented as a text value or when a Boolean is referred to in a string concatenation.

For Boolean objects and values, the built-in toString method returns the string "true" or "false" depending on the value of the boolean object. In the following code, flag.toString returns "true".

var flag = new Boolean(true);
var myVar=flag.toString();
]]></documentation>
		</method>
		<method name="valueOf" return-type="Boolean">
			<documentation><![CDATA[
Summary
Returns the primitive value of a Boolean object.

Syntax
valueOf();

Parameters
None.

Description
The valueOf method of Boolean returns the primitive value of a Boolean object or literal Boolean as a Boolean data type.

This method is usually called internally by JavaScript and not explicitly in code.

Examples
Example: Using valueOf
x = new Boolean();
myVar = x.valueOf()      //assigns false to myVar
]]></documentation>
		</method>
	</object>
	<object name="Date" hasStatic="true" showInRootAC="false">
		<documentation><![CDATA[
Summary
Creates Date instances which let you work with dates and times.

Syntax
new Date();
new Date(milliseconds);
new Date(dateString);
new Date(year, month, date [, hour, minute, second, millisecond ]);

Parameters
milliseconds 
Integer value representing the number of milliseconds since 1 January 1970 00:00:00 UTC.
dateString 
String value representing a date. The string should be in a format recognized by the parse method.
year
Integer value representing the year. For compatibility (in order to avoid the Y2K problem), you should always specify the year in full; use 1998, rather than 98.
month
Integer value representing the month, beginning with 0 for January to 11 for December.
date
Integer value representing the day of the month.
hour
Integer value representing the hour of the day (24-hour scale).
minute
Integer value representing the minute segment of a time reading.
second
Integer value representing the second segment of a time reading.
millisecond
Integer value representing the millisecond segment of a time reading.
Description
If you supply no arguments, the constructor creates a Date object for today's date and time according to local time. If you supply some arguments but not others, the missing arguments are set to 0. If you supply any arguments, you must supply at least the year, month, and day. You can omit the hours, minutes, seconds, and milliseconds.
The date is measured in milliseconds since midnight 01 January, 1970 UTC. A day holds 86,400,000 milliseconds. The Date object range is -100,000,000 days to 100,000,000 days relative to 01 January, 1970 UTC.

The Date object provides uniform behavior across platforms.

The Date object supports a number of UTC (universal) methods, as well as local time methods. UTC, also known as Greenwich Mean Time (GMT), refers to the time as set by the World Time Standard. The local time is the time known to the computer where JavaScript is executed.

Invoking Date in a non-constructor context (i.e., without the new operator) will return a string representing the current time. 

Examples
Example: Several ways to assign dates
The following examples show several ways to assign dates:

today = new Date();
birthday = new Date("December 17, 1995 03:24:00");
birthday = new Date(1995,11,17);
birthday = new Date(1995,11,17,3,24,0);
Example: Calculating elapsed time
The following examples show how to determine the elapsed time between two dates:

// using static methods
var start = Date.now();
// the event you'd like to time goes here:
doSomethingForALongTime();
var end = Date.now();
var elapsed = end - start; // time in milliseconds
// if you have Date objects
var start = new Date();
// the event you'd like to time goes here:
doSomethingForALongTime();
var end = new Date();
var elapsed = end.getTime() - start.getTime(); // time in milliseconds
 ]]></documentation>
		<method name="getDate" return-type="Number">
			<documentation><![CDATA[
Summary
Returns the day of the month for the specified date according to local time.

Syntax
getDate();

Parameters
None.

Description
The value returned by getDate is an integer between 1 and 31.

Examples
Example: Using getDate
The second statement below assigns the value 25 to the variable day, based on the value of the Date object Xmas95.

Xmas95 = new Date("December 25, 1995 23:15:00")
day = Xmas95.getDate() 
 ]]></documentation>
		</method>
		<method name="getDay" return-type="Number">
			<documentation><![CDATA[ 
Summary
Returns the day of the week for the specified date according to local time.

Syntax
getDay();

Parameters
None.

Description
The value returned by getDay is an integer corresponding to the day of the week: 0 for Sunday, 1 for Monday, 2 for Tuesday, and so on.

Examples
Example: Using getDay
The second statement below assigns the value 1 to weekday, based on the value of the Date object Xmas95. December 25, 1995, is a Monday.

Xmas95 = new Date("December 25, 1995 23:15:00");
weekday = Xmas95.getDay();
 ]]></documentation>
		</method>
		<method name="getFullYear" return-type="Number">
			<documentation><![CDATA[
Summary
Returns the year of the specified date according to local time.

Syntax
getFullYear();

Parameters
None.

Description
The value returned by getFullYear is an absolute number. For dates between the years 1000 and 9999, getFullYear returns a four-digit number, for example, 1995. Use this function to make sure a year is compliant with years after 2000.

Use this method instead of the getYear method.

Examples
Example: Using getFullYear
The following example assigns the four-digit value of the current year to the variable yr.

var today = new Date();
var yr = today.getFullYear();  
]]></documentation>
		</method>
		<method name="getMonth" return-type="Number">
			<documentation><![CDATA[
Summary
Returns the month in the specified date according to local time.

Syntax
getMonth();

Parameters
None.

Description
The value returned by getMonth is an integer between 0 and 11. 0 corresponds to January, 1 to February, and so on.

Examples
Example: Using getMonth
The second statement below assigns the value 11 to the variable month, based on the value of the Date object Xmas95.

Xmas95 = new Date("December 25, 1995 23:15:00")
month = Xmas95.getMonth() 
]]></documentation>
		</method>
		<method name="getHours" return-type="Number">
			<documentation><![CDATA[
Summary
Returns the hour for the specified date according to local time.

Syntax
getHours();

Parameters
None.

Description
The value returned by getHours is an integer between 0 and 23.

Examples
Example: Using getHours
The second statement below assigns the value 23 to the variable hours, based on the value of the Date object Xmas95.

Xmas95 = new Date("December 25, 1995 23:15:00")
hours = Xmas95.getHours() 
]]></documentation>
		</method>
		<method name="getMilliseconds" return-type="Number">
			<documentation><![CDATA[ Summary
Returns the milliseconds in the specified date according to local time.
Syntax
getMilliseconds();

Parameters
None.

Description
The value returned by getMilliseconds is a number between 0 and 999.

Examples
Example: Using getMilliseconds
The following example assigns the milliseconds portion of the current time to the variable ms.

var ms;
Today = new Date();
ms = Today.getMilliseconds(); 
See Also
getUTCMilliseconds, setMilliseconds
]]></documentation>
		</method>
		<method name="getMinutes" return-type="Number">
			<documentation><![CDATA[Summary
Returns the minutes in the specified date according to local time.
Syntax
getMinutes();

Parameters
None.

Description
The value returned by getMinutes is an integer between 0 and 59.

Examples
Example: Using getMinutes
The second statement below assigns the value 15 to the variable minutes, based on the value of the Date object Xmas95.

Xmas95 = new Date("December 25, 1995 23:15:00")
minutes = Xmas95.getMinutes()
]]></documentation>
		</method>
		<method name="getSeconds" return-type="Number">
			<documentation><![CDATA[
Summary
Returns the seconds in the specified date according to local time.
Syntax
getSeconds();

Parameters
None.

Description
The value returned by getSeconds is an integer between 0 and 59.

Examples
Example: Using getSeconds
The second statement below assigns the value 30 to the variable secs, based on the value of the Date object Xmas95.

Xmas95 = new Date("December 25, 1995 23:15:30")
secs = Xmas95.getSeconds()
  ]]></documentation>
		</method>
		<method name="getTime" return-type="Number">
			<documentation><![CDATA[
Summary
Returns the numeric value corresponding to the time for the specified date according to universal time.

Syntax
getTime();

Parameters
None.

Description
The value returned by the getTime method is the number of milliseconds since 1 January 1970 00:00:00. You can use this method to help assign a date and time to another Date object.

This method is functionally equivalent to the valueOf method.

Examples
Example: Using getTime
The following example assigns the date value of theBigDay to sameAsBigDay:

theBigDay = new Date("July 1, 1999")
sameAsBigDay = new Date()
sameAsBigDay.setTime(theBigDay.getTime()) 
]]></documentation>
		</method>
		<method name="getTimezoneOffset" return-type="Number">
			<documentation><![CDATA[
Summary
Returns the time-zone offset in minutes for the current locale.

Syntax
getTimezoneOffset();

Parameters
None.

Description
The time-zone offset is the minutes in difference, the Greenwich Mean Time (GMT) is relative to your local time. For example, if your time zone is GMT+10, -600 will be returned. Daylight savings time prevents this value from being a constant.

Examples
Example: Using getTimezoneOffset
x = new Date()
currentTimeZoneOffsetInHours = x.getTimezoneOffset()/60
]]></documentation>
		</method>
		<method name="getUTCDate" return-type="Number" showInRootAC="false">
			<documentation><![CDATA[ 
Summary
Returns the day (date) of the month in the specified date according to universal time.

Syntax
getUTCDate();

Parameters
None.

Description
The value returned by getUTCDate is an integer between 1 and 31.

Examples
Example: Using getUTCDate
The following example assigns the day portion of the current date to the variable d.

var d;
Today = new Date();
d = Today.getUTCDate();
 ]]></documentation>
		</method>
		<method name="getUTCDay" return-type="Number" showInRootAC="false">
			<documentation><![CDATA[
Summary
Returns the day of the week in the specified date according to universal time.

Syntax
getUTCDay();

Parameters
None.

Description
The value returned by getUTCDay is an integer corresponding to the day of the week: 0 for Sunday, 1 for Monday, 2 for Tuesday, and so on.

Examples
Example: Using getUTCDay
The following example assigns the weekday portion of the current date to the variable weekday.

var weekday;
Today = new Date()
weekday = Today.getUTCDay()
 ]]></documentation>
		</method>
		<method name="getUTCFullYear" return-type="Number"
			showInRootAC="false">
			<documentation><![CDATA[
Summary
Returns the year in the specified date according to universal time.

Syntax
getUTCFullYear();

Parameters
None.

Description
The value returned by getUTCFullYear is an absolute number that is compliant with year-2000, for example, 1995.

Examples
Example: Using getUTCFullYear
The following example assigns the four-digit value of the current year to the variable yr.

var yr;
Today = new Date();
yr = Today.getUTCFullYear(); 
]]></documentation>
		</method>
		<method name="getUTCHours" return-type="Number" showInRootAC="false">
			<documentation><![CDATA[
Summary
Returns the hours in the specified date according to universal time.

Syntax
getUTCHours();

Parameters
None.

Description
The value returned by getUTCHours is an integer between 0 and 23.

Examples
Example: Using getUTCHours
The following example assigns the hours portion of the current time to the variable hrs.

var hrs;
Today = new Date();
hrs = Today.getUTCHours();
]]></documentation>
		</method>
		<method name="getUTCMilliseconds" return-type="Number"
			showInRootAC="false">
			<documentation><![CDATA[ 
Summary
Returns the milliseconds in the specified date according to universal time.

Syntax
getUTCMilliseconds();

Parameters
None.

Description
The value returned by getUTCMilliseconds is an integer between 0 and 999.

Examples
Example: Using getUTCMilliseconds =
The following example assigns the milliseconds portion of the current time to the variable ms.

var ms;
Today = new Date();
ms = Today.getUTCMilliseconds();
]]></documentation>
		</method>
		<method name="getUTCMinutes" return-type="Number" showInRootAC="false">
			<documentation><![CDATA[ 
Summary
Returns the minutes in the specified date according to universal time.

Syntax
getUTCMinutes();

Parameters
None.

Description
The value returned by getUTCMinutes is an integer between 0 and 59.

Examples
Example: Using getUTCMinutes
The following example assigns the minutes portion of the current time to the variable min.

var min;
Today = new Date();
min = Today.getUTCMinutes();
]]></documentation>
		</method>
		<method name="getUTCMonth" return-type="Number" showInRootAC="false">
			<documentation><![CDATA[ 
Summary
Returns the month of the specified date according to universal time.

Syntax
getUTCMonth();

Parameters
None.

Description
The value returned by getUTCMonth is an integer between 0 and 11 corresponding to the month. 0 for January, 1 for February, 2 for March, and so on.

Examples
Example: Using getUTCMonth
The following example assigns the month portion of the current date to the variable mon.

var mon;
Today = new Date();
mon = Today.getUTCMonth();
 ]]></documentation>
		</method>
		<method name="getUTCSeconds" return-type="Number" showInRootAC="false">
			<documentation><![CDATA[ 
Summary
Returns the seconds in the specified date according to universal time.

Syntax
getUTCSeconds();

Parameters
None.

Description
The value returned by getUTCSeconds is an integer between 0 and 59.

Examples
Example: Using getUTCSeconds
The following example assigns the seconds portion of the current time to the variable sec.

var sec;
Today = new Date();
sec = Today.getUTCSeconds();
 ]]></documentation>
		</method>
		<method name="parse" return-type="Date" static="true">
			<params>
				<parameter name="dateString" type="String" optional="false"><![CDATA[                   The string to parse.             ]]></parameter>
			</params>
			<documentation><![CDATA[ 
Summary
Parses a string representation of a date, and returns the number of milliseconds since January 1, 1970, 00:00:00 UTC.

Syntax
Date.parse(dateString);

Parameters
dateString 
A string representing a date.
Description
The parse method takes a date string (such as "Dec 25, 1995") and returns the number of milliseconds since January 1, 1970, 00:00:00 UTC. The local time zone is used to interpret arguments that do not contain time zone information. This function is useful for setting date values based on string values, for example in conjunction with the setTime method and the Date object.

Given a string representing a time, parse returns the time value. It accepts the IETF standard (RFC 1123 Section 5.2.14 and elsewhere) date syntax: "Mon, 25 Dec 1995 13:30:00 GMT". It understands the continental US time-zone abbreviations, but for general use, use a time-zone offset, for example, "Mon, 25 Dec 1995 13:30:00 GMT+0430" (4 hours, 30 minutes east of the Greenwich meridian). If you do not specify a time zone, the local time zone is assumed. GMT and UTC are considered equivalent.

Note that while time zone specifiers are used during date string parsing to properly interpret the argument, they do not affect the value returned, which is always the number of milliseconds between January 1, 1970 00:00:00 UTC and the point in time represented by the argument.

Because parse is a static method of Date, you always use it as Date.parse(), rather than as a method of a Date object you created.

Examples
Example: Using parse
If IPOdate is an existing Date object, then you can set it to August 9, 1995 (local time) as follows:

IPOdate.setTime(Date.parse("Aug 9, 1995")) ;
Some other examples:

// Returns 807937200000 in time zone GMT-0300, and other values in other
// timezones, since the argument does not specify a time zone.
Date.parse("Aug 9, 1995");
// Returns 807926400000 no matter the local time zone.
Date.parse("Wed, 09 Aug 1995 00:00:00 GMT");
// Returns 807937200000 in timezone GMT-0300, and other values in other
// timezones, since there is no time zone specifier in the argument.
Date.parse("Wed, 09 Aug 1995 00:00:00");
// Returns 0 no matter the local time zone.
Date.parse("Thu, 01 Jan 1970 00:00:00 GMT");
// Returns 14400000 in timezone GMT-0400, and other values in other 
// timezones, since there is no time zone specifier in the argument.
Date.parse("Thu, 01 Jan 1970 00:00:00");
// Returns 14400000 no matter the local time zone.
Date.parse("Thu, 01 Jan 1970 00:00:00 GMT-0400");
]]></documentation>
		</method>
		<method name="setDate" return-type="VOID">
			<params>
				<parameter name="date" type="Number" optional="false"><![CDATA[                   The date number.             ]]></parameter>
			</params>
			<documentation><![CDATA[
Summary
Sets the day of the month for a specified date according to local time.

Syntax
setDate(dayValue);

Parameters
dayValue 
An integer from 1 to 31, representing the day of the month.
Examples
Example: Using setDate
The second statement below changes the day for theBigDay to July 24 from its original value.

theBigDay = new Date("July 27, 1962 23:30:00")
theBigDay.setDate(24) 
]]></documentation>
		</method>
		<method name="setFullYear" return-type="VOID">
			<params>
				<parameter name="year" type="Number" optional="false"><![CDATA[                   The year number.             ]]></parameter>
			</params>
			<documentation><![CDATA[Summary
Sets the full year for a specified date according to local time.

Syntax
setFullYear(yearValue[, monthValue[, dayValue]]);

Parameters
yearValue 
An integer specifying the numeric value of the year, for example, 1995.
monthValue 
An integer between 0 and 11 representing the months January through December.
dayValue 
An integer between 1 and 31 representing the day of the month. If you specify the dayValue parameter, you must also specify the monthValue.
Description
If you do not specify the monthValue and dayValue parameters, the values returned from the getMonth and getDate methods are used.

If a parameter you specify is outside of the expected range, setFullYear attempts to update the other parameters and the date information in the Date object accordingly. For example, if you specify 15 for monthValue, the year is incremented by 1 (year + 1), and 3 is used for the month.

Examples
Example: Using setFullYear
theBigDay = new Date();
theBigDay.setFullYear(1997);
]]></documentation>
		</method>
		<method name="setHours" return-type="VOID">
			<params>
				<parameter name="hours" type="Number" optional="false"><![CDATA[                 The year number.             ]]></parameter>
			</params>
			<documentation><![CDATA[
Summary
Sets the hours for a specified date according to local time.

Syntax
setHours(hoursValue[, minutesValue[, secondsValue[, msValue]]]);

Parameters
hoursValue 
An integer between 0 and 23, representing the hour.
minutesValue 
An integer between 0 and 59, representing the minutes.
secondsValue 
An integer between 0 and 59, representing the seconds. If you specify the secondsValue parameter, you must also specify the minutesValue.
msValue 
A number between 0 and 999, representing the milliseconds. If you specify the msValue parameter, you must also specify the minutesValue and secondsValue.
Description
If you do not specify the minutesValue, secondsValue, and msValue parameters, the values returned from the getUTCMinutes, getUTCSeconds, and getMilliseconds methods are used.

If a parameter you specify is outside of the expected range, setHours attempts to update the date information in the Date object accordingly. For example, if you use 100 for secondsValue, the minutes will be incremented by 1 (min + 1), and 40 will be used for seconds.

Examples
Example: Using setHours
theBigDay.setHours(7)
]]></documentation>
		</method>
		<method name="setMilliseconds" return-type="VOID">
			<params>
				<parameter name="millis" type="Number" optional="false"><![CDATA[                 The year number.             ]]></parameter>
			</params>
			<documentation><![CDATA[
Summary
Sets the milliseconds for a specified date according to local time.

Syntax
setMilliseconds(millisecondsValue);

Parameters
millisecondsValue 
A number between 0 and 999, representing the milliseconds.
Description
If you specify a number outside the expected range, the date information in the Date object is updated accordingly. For example, if you specify 1005, the number of seconds is incremented by 1, and 5 is used for the milliseconds.

Examples
Example: Using setMilliseconds
theBigDay = new Date();
theBigDay.setMilliseconds(100);
]]></documentation>
		</method>
		<method name="setMinutes" return-type="VOID">
			<params>
				<parameter name="minutes" type="Number" optional="false"><![CDATA[                 The year number.             ]]></parameter>
			</params>
			<documentation><![CDATA[
Summary
Sets the minutes for a specified date according to local time.

Syntax
setMinutes(minutesValue[, secondsValue[, msValue]]);

Versions prior to JavaScript 1.3
setMinutes(minutesValue)

Parameters
minutesValue 
An integer between 0 and 59, representing the minutes.
secondsValue 
An integer between 0 and 59, representing the seconds. If you specify the secondsValue parameter, you must also specify the minutesValue.
msValue 
A number between 0 and 999, representing the milliseconds. If you specify the msValue parameter, you must also specify the minutesValue and secondsValue.
Description
If you do not specify the secondsValue and msValue parameters, the values returned from getSeconds and getMilliseconds methods are used.

If a parameter you specify is outside of the expected range, setMinutes attempts to update the date information in the Date object accordingly. For example, if you use 100 for secondsValue, the minutes (minutesValue) will be incremented by 1 (minutesValue + 1), and 40 will be used for seconds.

Examples
Example: Using setMinutes
theBigDay.setMinutes(45);
]]></documentation>
		</method>
		<method name="setMonth" return-type="VOID">
			<params>
				<parameter name="months" type="Number" optional="false"><![CDATA[                    The year number.             ]]></parameter>
			</params>
			<documentation><![CDATA[
Summary
Set the month for a specified date according to local time.

Syntax
setMonth(monthValue[, dayValue]);

Parameter
monthValue 
An integer between 0 and 11 (representing the months January through December).
dayValue 
An integer from 1 to 31, representing the day of the month.
Description
If you do not specify the dayValue parameter, the value returned from the getDate method is used.

If a parameter you specify is outside of the expected range, setMonth attempts to update the date information in the Date object accordingly. For example, if you use 15 for monthValue, the year will be incremented by 1 (year + 1), and 3 will be used for month.

Examples
Example: Using setMonth
theBigDay.setMonth(6);
]]></documentation>
		</method>
		<method name="setSeconds" return-type="VOID">
			<params>
				<parameter name="seconds" type="Number" optional="false"><![CDATA[                 The year number.             ]]></parameter>
			</params>
			<documentation><![CDATA[
Summary
Sets the seconds for a specified date according to local time.

Syntax
setSeconds(secondsValue[, msValue]);

Parameters
secondsValue 
An integer between 0 and 59.
msValue 
A number between 0 and 999, representing the milliseconds.
Description
If you do not specify the msValue parameter, the value returned from the getMilliseconds method is used.

If a parameter you specify is outside of the expected range, setSeconds attempts to update the date information in the Date object accordingly. For example, if you use 100 for secondsValue, the minutes stored in the Date object will be incremented by 1, and 40 will be used for seconds.

Examples
Example: Using setSeconds
theBigDay.setSeconds(30);
]]></documentation>
		</method>
		<method name="setTime" return-type="VOID">
			<params>
				<parameter name="year" type="Number" optional="false"><![CDATA[                   The year number.             ]]></parameter>
			</params>
			<documentation><![CDATA[
Summary
Sets the Date object to the time represented by a number of milliseconds since January 1, 1970, 00:00:00 UTC.

Syntax
setTime(timeValue);

Parameters
timeValue 
An integer representing the number of milliseconds since 1 January 1970, 00:00:00 UTC.
Description
Use the setTime method to help assign a date and time to another Date object.

Examples
Example: Using setTime
var theBigDay = new Date("July 1, 1999");
var sameAsBigDay = new Date();
sameAsBigDay.setTime(theBigDay.getTime());
]]></documentation>
		</method>
		<method name="setUTCDate" return-type="VOID" showInRootAC="false">
			<params>
				<parameter name="date" type="Number" optional="false"><![CDATA[                 The date number.             ]]></parameter>
			</params>
			<documentation><![CDATA[
Summary
Sets the day of the month for a specified date according to universal time.

Syntax
setUTCDate(dayValue);

Parameters
dayValue 
An integer from 1 to 31, representing the day of the month.
Description
If a parameter you specify is outside of the expected range, setUTCDate attempts to update the date information in the Date object accordingly. For example, if you use 40 for dayValue, and the month stored in the Date object is June, the day will be changed to 10 and the month will be incremented to July.

Examples
Example: Using setUTCDate
var theBigDay = new Date();
var theBigDay.setUTCDate(20);
]]></documentation>
		</method>
		<method name="setUTCFullYear" return-type="VOID" showInRootAC="false">
			<params>
				<parameter name="year" type="Number" optional="false"><![CDATA[                 The year number.             ]]></parameter>
			</params>
			<documentation><![CDATA[
Summary
Sets the full year for a specified date according to universal time.

Syntax
setUTCFullYear(yearValue[, monthValue[, dayValue]]);

Parameters
yearValue 
An integer specifying the numeric value of the year, for example, 1995.
monthValue 
An integer between 0 and 11 representing the months January through December.
dayValue 
An integer between 1 and 31 representing the day of the month. If you specify the dayValue parameter, you must also specify the monthValue.
Description
If you do not specify the monthValue and dayValue parameters, the values returned from the getMonth and getDate methods are used.

If a parameter you specify is outside of the expected range, setUTCFullYear attempts to update the other parameters and the date information in the Date object accordingly. For example, if you specify 15 for monthValue, the year is incremented by 1 (year + 1), and 3 is used for the month.

Examples
Example: Using setUTCFullYear
theBigDay = new Date();
theBigDay.setUTCFullYear(1997); 
]]></documentation>
		</method>
		<method name="setUTCHours" return-type="VOID" showInRootAC="false">
			<params>
				<parameter name="hours" type="Number" optional="false"><![CDATA[                   The year number.             ]]></parameter>
			</params>
			<documentation><![CDATA[
Summary
Sets the hour for a specified date according to universal time.

Syntax
setUTCHours(hoursValue[, minutesValue[, secondsValue[, msValue]]]);

Parameters
hoursValue 
An integer between 0 and 23, representing the hour.
minutesValue 
An integer between 0 and 59, representing the minutes.
secondsValue 
An integer between 0 and 59, representing the seconds. If you specify the secondsValue parameter, you must also specify the minutesValue.
msValue 
A number between 0 and 999, representing the milliseconds. If you specify the msValue parameter, you must also specify the minutesValue and secondsValue.
Description
If you do not specify the minutesValue, secondsValue, and msValue parameters, the values returned from the getUTCMinutes, getUTCSeconds, and getUTCMilliseconds methods are used.

If a parameter you specify is outside of the expected range, setUTCHours attempts to update the date information in the Date object accordingly. For example, if you use 100 for secondsValue, the minutes will be incremented by 1 (min + 1), and 40 will be used for seconds.

Examples
Example: Using setUTCHours
var theBigDay = new Date();
theBigDay.setUTCHours(8);
]]></documentation>
		</method>
		<method name="setUTCMilliseconds" return-type="VOID"
			showInRootAC="false">
			<params>
				<parameter name="millis" type="Number" optional="false"><![CDATA[                   The year number.             ]]></parameter>
			</params>
			<documentation><![CDATA[Summary
Sets the milliseconds for a specified date according to universal time.

Syntax
setUTCMilliseconds(millisecondsValue);

Parameters
millisecondsValue 
A number between 0 and 999, representing the milliseconds.
Description
If a parameter you specify is outside of the expected range, setUTCMilliseconds attempts to update the date information in the Date object accordingly. For example, if you use 1100 for millisecondsValue, the seconds stored in the Date object will be incremented by 1, and 100 will be used for milliseconds.

Examples
Example: Using setUTCMilliseconds
var theBigDay = new Date();
theBigDay.setUTCMilliseconds(500);
]]></documentation>
		</method>
		<method name="setUTCMinutes" return-type="VOID" showInRootAC="false">
			<params>
				<parameter name="minutes" type="Number" optional="false"><![CDATA[                   The year number.             ]]></parameter>
			</params>
			<documentation><![CDATA[
Summary
Sets the minutes for a specified date according to universal time.

Syntax
setUTCMinutes(minutesValue[, secondsValue[, msValue]]);

Parameters
minutesValue 
An integer between 0 and 59, representing the minutes.
secondsValue 
An integer between 0 and 59, representing the seconds. If you specify the secondsValue parameter, you must also specify the minutesValue.
msValue 
A number between 0 and 999, representing the milliseconds. If you specify the msValue parameter, you must also specify the minutesValue and secondsValue.
Description
If you do not specify the secondsValue and msValue parameters, the values returned from getUTCSeconds and getUTCMilliseconds methods are used.

If a parameter you specify is outside of the expected range, setUTCMinutes attempts to update the date information in the Date object accordingly. For example, if you use 100 for secondsValue, the minutes (minutesValue) will be incremented by 1 (minutesValue + 1), and 40 will be used for seconds.

Examples
Example: Using setUTCMinutes
theBigDay = new Date();
theBigDay.setUTCMinutes(43);
]]></documentation>
		</method>
		<method name="setUTCMonth" return-type="VOID" showInRootAC="false">
			<params>
				<parameter name="months" type="Number" optional="false"><![CDATA[                  The year number.             ]]></parameter>
			</params>
			<documentation><![CDATA[
Summary
Sets the month for a specified date according to universal time.

Syntax
setUTCMonth(monthValue[, dayValue]);

Parameters
monthValue 
An integer between 0 and 11, representing the months January through December.
dayValue 
An integer from 1 to 31, representing the day of the month.
Description
If you do not specify the dayValue parameter, the value returned from the getUTCDate method is used.

If a parameter you specify is outside of the expected range, setUTCMonth attempts to update the date information in the Date object accordingly. For example, if you use 15 for monthValue, the year will be incremented by 1 (year + 1), and 3 will be used for month.

Examples
Example: Using setUTCMonth
theBigDay = new Date();
theBigDay.setUTCMonth(11);
]]></documentation>
		</method>
		<method name="setUTCSeconds" return-type="VOID" showInRootAC="false">
			<params>
				<parameter name="seconds" type="Number" optional="false"><![CDATA[                   The year number.             ]]></parameter>
			</params>
			<documentation><![CDATA[
Summary
Sets the seconds for a specified date according to universal time.

Syntax
setUTCSeconds(secondsValue[, msValue]);

Parameters
secondsValue 
An integer between 0 and 59.
msValue 
A number between 0 and 999, representing the milliseconds.
Description
If you do not specify the msValue parameter, the value returned from the getUTCMilliseconds methods is used.

If a parameter you specify is outside of the expected range, setUTCSeconds attempts to update the date information in the Date object accordingly. For example, if you use 100 for secondsValue, the minutes stored in the Date object will be incremented by 1, and 40 will be used for seconds.

Examples
Example: Using setUTCSeconds
var theBigDay = new Date();
theBigDay.setUTCSeconds(20);
]]></documentation>
		</method>
		<method name="toGMTString" return-type="String" showInRootAC="false">
			<documentation><![CDATA[
Summary
Converts a date to a string, using Internet GMT conventioins.

Syntax
toGMTString();

Parameters
None.

Description
toGMTString is no longer used and has been replaced by the toUTCString method.

The exact format of the value returned by toGMTString varies according to the platform.

You should use Date.toUTCString instead of toGMTSTring.

Like toUTCString, toGMTString returns a string representation of the date in American English in the GMT time zone.

Examples
Example: Using toGMTString
In the following example, today is a Date object:
var today=new Date();
today.toGMTString()
In this example, the toGMTString method converts the date to GMT (UTC) using the operating system's time-zone offset and returns a string value that is similar to the following form. The exact format depends on the platform.

Mon, 18 Dec 1995 17:28:35 GMT
]]></documentation>
		</method>
		<method name="toLocaleString" return-type="String"
			showInRootAC="false">
			<documentation><![CDATA[
Summary
Converts a date to a string, using the operating system's locale's conventions.

Syntax
toLocaleString();

Parameters
None.

Description
The toLocaleString method relies on the underlying operating system in formatting dates. It converts the date to a string using the formatting convention of the operating system where the script is running. For example, in the United States, the month appears before the date (04/15/98), whereas in Germany the date appears before the month (15.04.98). If the operating system is not year-2000 compliant and does not use the full year for years before 1900 or over 2000, toLocaleString returns a string that is not year-2000 compliant. toLocaleString behaves similarly to toString when converting a year that the operating system does not properly format.

Methods such as getDate, getMonth, getFullYear, getHours, getMinutes, and getSeconds give more portable results than toLocaleString. Use toLocaleString when the intent is to display to the user a string formatted using the regional format chosen by the user. Be aware that this method, due to its nature, behaves differently depending on the operating system and on the user's settings.

Examples
Using toLocaleString
In the following example, today is a Date object:

today = new Date(95,11,18,17,28,35); //months are represented by 0 to 11
today.toLocaleString();
In this example, toLocaleString returns a string value that is similar to the following form. The exact format depends on the platform, locale and user's settings.

12/18/95 17:28:35
You shouldn't use this method in contexts where you rely on a particular format or locale.

"Last visit: " + someDate.toLocaleString(); // Good example
"Last visit was at " + someDate.toLocaleString(); // Bad example
              ]]></documentation>
		</method>
		<method name="toLocaleDateString" return-type="String"
			showInRootAC="false">
			<documentation><![CDATA[
Summary
Converts a date to a string, returning the "date" portion using the operating system's locale's conventions.

Syntax
toLocaleDateString();

Parameters
None.

Description
The toLocaleDateString method relies on the underlying operating system in formatting dates. It converts the date to a string using the formatting convention of the operating system where the script is running. For example, in the United States, the month appears before the date (04/15/98), whereas in Germany the date appears before the month (15.04.98). If the operating system is not year-2000 compliant and does not use the full year for years before 1900 or over 2000, toLocaleDateString returns a string that is not year-2000 compliant. toLocaleDateString behaves similarly to toString when converting a year that the operating system does not properly format.

Methods such as getDate, getMonth, and getFullYear give more portable results than toLocaleDateString. Use toLocaleDateString when the intent is to display to the user a string formatted using the regional format chosen by the user. Be aware that this method, due to its nature, behaves differently depending on the operating system and on the user's settings.

Examples
Using toLocaleDateString
In the following example, today is a Date object:

today = new Date(95,11,18,17,28,35) //months are represented by 0 to 11
today.toLocaleDateString()
In this example, toLocaleDateString returns a string value that is similar to the following form. The exact format depends on the platform, locale and user's settings.

12/18/95
You shouldn't use this method in contexts where you rely on a particular format or locale.

"Last visit: " + someDate.toLocaleDateString(); // Good example
"Last visit was at " + someDate.toLocaleDateString(); // Bad example
              ]]></documentation>
		</method>
		<method name="toLocaleTimeString" return-type="String"
			showInRootAC="false">
			<documentation><![CDATA[
Summary
Converts a date to a string, returning the "date" portion using the current locale's conventions.

Syntax
toLocaleTimeString();

Parameters
None.

Description
The toLocaleTimeString method relies on the underlying operating system in formatting dates. It converts the date to a string using the formatting convention of the operating system where the script is running. For example, in the United States, the month appears before the date (04/15/98), whereas in Germany the date appears before the month (15.04.98). If the operating system is not year-2000 compliant and does not use the full year for years before 1900 or over 2000, toLocaleTimeString returns a string that is not year-2000 compliant. toLocaleTimeString behaves similarly to toString when converting a year that the operating system does not properly format.

Methods such as getHours, getMinutes, and getSeconds give more consistent results than toLocaleTimeString. Use toLocaleTimeString when the intent is to display to the user a string formatted using the regional format chosen by the user. Be aware that this method, due to its nature, behaves differently depending on the operating system and on the user's settings.

Examples
Using toLocaleTimeString
In the following example, today is a Date object:

today = new Date(95,11,18,17,28,35) //months are represented by 0 to 11
today.toLocaleTimeString()
In this example, toLocaleTimeString returns a string value that is similar to the following form. The exact format depends on the platform.

17:28:35
You shouldn't use this method in contexts where you rely on a particular format or locale.

"Last visit: " + someDate.toLocaleTimeString(); // Good example
"Last visit was at " + someDate.toLocaleTimeString(); // Bad example
              ]]></documentation>
		</method>
		<method name="toUTCString" return-type="String" showInRootAC="false">
			<documentation><![CDATA[ 
Summary
Converts a date to a string, using the universal time convention.

Syntax
toUTCString()

Parameters
None.

Description
The value returned by toUTCString is a readable string in American English in the UTC time zone. The format of the return value may vary according to the platform.

Examples
Example: Using toUTCString
var today = new Date();
var UTCstring = today.toUTCString();
// Mon, 03 Jul 2006 21:44:38 GMT
            ]]></documentation>
		</method>
		<method name="toTimeString" return-type="String" showInRootAC="false">
			<documentation><![CDATA[
Summary
Returns the time portion of a Date object in human readable form in American English.

Syntax
date.toTimeString()

Description
Date instances refer to a specific point in time. Calling toString will return the date formatted in a human readable form in American English. In SpiderMonkey, this consists of the date portion (day, month, and year) followed by the time portion (hours, minutes, seconds, and time zone). Sometimes it is desirable to obtain a string of the time portion; such a thing can be accomplished with the toTimeString method.

The toTimeString method is especially useful because compliant engines implementing ECMA-262 may differ in the string obtained from toString for Date objects, as the format is implementation-dependent; simple string slicing approaches may not produce consistent results across multiple engines.

Example
Example: A basic usage of toTimeString
var d = new Date(1993, 6, 28, 14, 39, 7);
println(d.toString()); // prints Wed Jul 28 1993 14:39:07 GMT-0600 (PDT)
println(d.toTimeString()); // prints 14:39:07 GMT-0600 (PDT)
              ]]></documentation>
		</method>
		<method name="toString" return-type="String" showInRootAC="false">
			<documentation><![CDATA[Summary
Returns a string representing the specified Date object.
Syntax
toString()

Parameters
None.

Description
The Date object overrides the toString method of the Object object; it does not inherit Object.toString. For Date objects, the toString method returns a string representation of the object.

toString always returns a string representation of the date in American English.

JavaScript calls the toString method automatically when a date is to be represented as a text value or when a date is referred to in a string concatenation.

Examples
Example: Using toString
The following assigns the toString value of a Date object to myVar:

x = new Date();
myVar=x.toString();   //assigns a value to myVar similar to:
     //Mon Sep 28 14:36:22 GMT-0700 (Pacific Daylight Time) 1998
              ]]></documentation>
		</method>
		<method name="valueOf" return-type="Number" showInRootAC="false">
			<documentation><![CDATA[Summary
Returns the primitive value of a Date object.

Syntax
valueOf()

Parameters
None.

Description
The valueOf method returns the primitive value of a Date object as a number data type, the number of milliseconds since midnight 01 January, 1970 UTC.

This method is functionally equivalent to the getTime method.

This method is usually called internally by JavaScript and not explicitly in code.

Examples
Example: Using valueOf
x = new Date(56, 6, 17);
myVar = x.valueOf();      //assigns -424713600000 to myVar
              ]]></documentation>
		</method>
		<method name="toUTCString" return-type="String" showInRootAC="false">
			<documentation><![CDATA[ Summary
Converts a date to a string, using the universal time convention.
Syntax
toUTCString()

Parameters
None.

Description
The value returned by toUTCString is a readable string in American English in the UTC time zone. The format of the return value may vary according to the platform.

Examples
Example: Using toUTCString
var today = new Date();
var UTCstring = today.toUTCString();
// Mon, 03 Jul 2006 21:44:38 GMT
            ]]></documentation>
		</method>
		<method name="UTC" return-type="Date" static="true">
			<params>
				<parameter name="year" type="Number" optional="false"><![CDATA[                   The year number.             ]]></parameter>
				<parameter name="month" type="Number" optional="false"><![CDATA[                  The month number.                ]]></parameter>
				<parameter name="day" type="Number" optional="false"><![CDATA[                    The day number.              ]]></parameter>
				<parameter name="hours" type="Number" optional="true"><![CDATA[                   The hours number.                ]]></parameter>
				<parameter name="minutes" type="Number" optional="true"><![CDATA[                 The minutes number.              ]]></parameter>
				<parameter name="seconds" type="Number" optional="true"><![CDATA[                 The seconds number.              ]]></parameter>
				<parameter name="millis" type="Number" optional="true"><![CDATA[                  The millis number.               ]]></parameter>
			</params>
			<documentation><![CDATA[Summary
Accepts the same parameters as the longest form of the constructor, and returns the number of milliseconds in a Date object since January 1, 1970, 00:00:00, universal time.
Syntax
Date.UTC(year, month[, date[, hrs[, min[, sec[, ms]]]]])

Parameters
year 
A year after 1900.
month 
An integer between 0 and 11 representing the month.
date 
An integer between 1 and 31 representing the day of the month.
hrs 
An integer between 0 and 23 representing the hours.
min 
An integer between 0 and 59 representing the minutes.
sec 
An integer between 0 and 59 representing the seconds.
ms 
An integer between 0 and 999 representing the milliseconds.
Description
UTC takes comma-delimited date parameters and returns the number of milliseconds between January 1, 1970, 00:00:00, universal time and the time you specified.

You should specify a full year for the year; for example, 1998. If a year between 0 and 99 is specified, the method converts the year to a year in the 20th century (1900 + year); for example, if you specify 95, the year 1995 is used.

The UTC method differs from the Date constructor in two ways.

Date.UTC uses universal time instead of the local time.
Date.UTC returns a time value as a number instead of creating a Date object.
If a parameter you specify is outside of the expected range, the UTC method updates the other parameters to allow for your number. For example, if you use 15 for month, the year will be incremented by 1 (year + 1), and 3 will be used for the month.

Because UTC is a static method of Date, you always use it as Date.UTC(), rather than as a method of a Date object you created.

Examples
Example: Using Date.UTC
The following statement creates a Date object using GMT instead of local time:

gmtDate = new Date(Date.UTC(96, 11, 1, 0, 0, 0));
]]></documentation>
		</method>
	</object>
	<object name="RegExp">
		<documentation><![CDATA[Summary
Creates a regular expression object for matching text according to a pattern.

Syntax
var regex = new RegExp("pattern" [, "flags"]);
var literal = /pattern/flags;
Parameters
pattern
The text of the regular expression.
flags
If specified, flags can have any combination of the following values:
g
global match
i
ignore case
m
match over multiple lines
y
New in Firefox 3
sticky; matches only from the index indicated by the lastIndex property of this regular expression in the target string (and does not attempt to match from any later indexes). This allows the match-only-at-start capabilities of the character "^" to effectively be used at any location in a string by changing the value of the lastIndex property.
Description
When using the constructor function, the normal string escape rules (preceding special characters with \ when included in a string) are necessary. For example, the following are equivalent:

var re = new RegExp("\\w+");
var re = /\w+/;
Notice that the parameters to the literal format do not use quotation marks to indicate strings, while the parameters to the constructor function do use quotation marks. So the following expressions create the same regular expression:

/ab+c/i;
new RegExp("ab+c", "i");

Special characters in regular expressions
Character   Meaning
\   
For characters that are usually treated literally, indicates that the next character is special and not to be interpreted literally.

For example, /b/ matches the character 'b'. By placing a backslash in front of b, that is by using /\b/, the character becomes special to mean match a word boundary.

or

For characters that are usually treated specially, indicates that the next character is not special and should be interpreted literally.

For example, * is a special character that means 0 or more occurrences of the preceding character should be matched; for example, /a*/ means match 0 or more "a"s. To match * literally, precede the it with a backslash; for example, /a\*/ matches 'a*'.

^   
Matches beginning of input. If the multiline flag is set to true, also matches immediately after a line break character.

For example, /^A/ does not match the 'A' in "an A", but does match the first 'A' in "An A."

$   
Matches end of input. If the multiline flag is set to true, also matches immediately before a line break character.

For example, /t$/ does not match the 't' in "eater", but does match it in "eat".

*   
Matches the preceding item 0 or more times.

For example, /bo*/ matches 'boooo' in "A ghost booooed" and 'b' in "A bird warbled", but nothing in "A goat grunted".

+   
Matches the preceding item 1 or more times. Equivalent to {1,}.

For example, /a+/ matches the 'a' in "candy" and all the a's in "caaaaaaandy".

?   
Matches the preceding item 0 or 1 time.

For example, /e?le?/ matches the 'el' in "angel" and the 'le' in "angle."

If used immediately after any of the quantifiers *, +, ?, or {}, makes the quantifier non-greedy (matching the minimum number of times), as opposed to the default, which is greedy (matching the maximum number of times).

Also used in lookahead assertions, described under (?=), (?!), and (?:) in this table.

.   
(The decimal point) matches any single character except the newline characters: \n \r \u2028 or \u2029. ([\s\S] can be used to match any character including newlines.)

For example, /.n/ matches 'an' and 'on' in "nay, an apple is on the tree", but not 'nay'.

(x) 
Matches x and remembers the match. These are called capturing parentheses.

For example, /(foo)/ matches and remembers 'foo' in "foo bar." The matched substring can be recalled from the resulting array's elements [1], ..., [n] or from the predefined RegExp object's properties $1, ..., $9.

(?:x)   
Matches x but does not remember the match. These are called non-capturing parentheses. The matched substring can not be recalled from the resulting array's elements [1], ..., [n] or from the predefined RegExp object's properties $1, ..., $9.

x(?=y)  
Matches x only if x is followed by y. For example, /Jack(?=Sprat)/ matches 'Jack' only if it is followed by 'Sprat'. /Jack(?=Sprat|Frost)/ matches 'Jack' only if it is followed by 'Sprat' or 'Frost'. However, neither 'Sprat' nor 'Frost' is part of the match results.

x(?!y)  
Matches x only if x is not followed by y. For example, /\d+(?!\.)/ matches a number only if it is not followed by a decimal point.

/\d+(?!\.)/.exec("3.141") matches 141 but not 3.141.

x|y 
Matches either x or y.

For example, /green|red/ matches 'green' in "green apple" and 'red' in "red apple."

{n} 
Where n is a positive integer. Matches exactly n occurrences of the preceding item.

For example, /a{2}/ doesn't match the 'a' in "candy," but it matches all of the a's in "caandy," and the first two a's in "caaandy."

{n,}    
Where n is a positive integer. Matches at least n occurrences of the preceding item.

For example, /a{2,} doesn't match the 'a' in "candy", but matches all of the a's in "caandy" and in "caaaaaaandy."

{n,m}   
Where n and m are positive integers. Matches at least n and at most m occurrences of the preceding item.

For example, /a{1,3}/ matches nothing in "cndy", the 'a' in "candy," the first two a's in "caandy," and the first three a's in "caaaaaaandy". Notice that when matching "caaaaaaandy", the match is "aaa", even though the original string had more a's in it.

[xyz]   
A character set. Matches any one of the enclosed characters. You can specify a range of characters by using a hyphen.

For example, [abcd] is the same as [a-d]. They match the 'b' in "brisket" and the 'c' in "ache".

[^xyz]  
A negated or complemented character set. That is, it matches anything that is not enclosed in the brackets. You can specify a range of characters by using a hyphen.

For example, [^abc] is the same as [^a-c]. They initially match 'r' in "brisket" and 'h' in "chop."

[\b]    
Matches a backspace. (Not to be confused with \b.)

\b  
Matches a word boundary, such as a space. (Not to be confused with [\b].)

For example, /\bn\w/ matches the 'no' in "noonday"; /\wy\b/ matches the 'ly' in "possibly yesterday."

\B  
Matches a non-word boundary.

For example, /\w\Bn/ matches 'on' in "noonday", and /y\B\w/ matches 'ye' in "possibly yesterday."

\cX 
Where X is a letter from A - Z. Matches a control character in a string.

For example, /\cM/ matches control-M in a string.

\d  
Matches a digit character in the basic Latin alphabet. Equivalent to [0-9].

Note: In Firefox 2 and earlier, matches a digit character from any alphabet. ( bug 378738 )

For example, /\d/ or /[0-9]/ matches '2' in "B2 is the suite number."

\D  
Matches any non-digit character in the basic Latin alphabet. Equivalent to [^0-9].

Note: In Firefox 2 and earlier, all alphabet. ( bug 378738 )

For example, /\D/ or /[^0-9]/ matches 'B' in "B2 is the suite number."

\f  
Matches a form-feed.

\n  
Matches a linefeed.

\r  
Matches a carriage return.

\s  
Matches a single white space character, including space, tab, form feed, line feed and other unicode spaces.equivalent_s

For example, /\s\w*/ matches ' bar' in "foo bar."

\S  
Matches a single character other than white space.equivalent_S

For example, /\S\w*/ matches 'foo' in "foo bar."

\t  
Matches a tab.

\v  
Matches a vertical tab.

\w  
Matches any alphanumeric character from the basic Latin alphabet, including the underscore. Equivalent to [A-Za-z0-9_].

For example, /\w/ matches 'a' in "apple," '5' in "$5.28," and '3' in "3D."

\W  
Matches any character that is not a word character from the basic Latin alphabet. Equivalent to [^A-Za-z0-9_].

For example, /\W/ or /[^$A-Za-z0-9_]/ matches '%' in "50%."

\n  
Where n is a positive integer. A back reference to the last substring matching the n parenthetical in the regular expression (counting left parentheses).

For example, /apple(,)\sorange\1/ matches 'apple, orange,' in "apple, orange, cherry, peach." A more complete example follows this table.

\0  
Matches a NUL character. Do not follow this with another digit.

\xhh    
Matches the character with the code hh (two hexadecimal digits)

\uhhhh  
Matches the character with the Unicode value hhhh (four hexadecimal digits).

The literal notation provides compilation of the regular expression when the expression is evaluated. Use literal notation when the regular expression will remain constant. For example, if you use literal notation to construct a regular expression used in a loop, the regular expression won't be recompiled on each iteration.

The constructor of the regular expression object, for example, new RegExp("ab+c"), provides runtime compilation of the regular expression. Use the constructor function when you know the regular expression pattern will be changing, or you don't know the pattern and are getting it from another source, such as user input.

Note: equivalent_s
Equivalent to:
[\t\n\v\f\r \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000]

Note: equivalent_S
Equivalent to:
[^\t\n\v\f\r \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000]

]]></documentation>
		<property name="global" type="Object">
			<documentation><![CDATA[Summary
Whether or not the "g" flag is used with the regular expression.

Property of RegExp instances
Read-only

ECMA Version:   ECMA-262, Edition 3
Description
global is a property of an individual regular expression object.

The value of global is true if the "g" flag was used; otherwise, false. The "g" flag indicates that the regular expression should be tested against all possible matches in a string.

You cannot change this property directly.
      ]]></documentation>
		</property>
		<property name="ignoreCase" type="Object">
			<documentation><![CDATA[Summary
Whether or not the "i" flag is used with the regular expression.

Property of RegExp instances

Description
ignoreCase is a property of an individual regular expression object.

The value of ignoreCase is true if the "i" flag was used; otherwise, false. The "i" flag indicates that case should be ignored while attempting a match in a string.

You cannot change this property directly.
      ]]></documentation>
		</property>
		<property name="lastIndex" type="Object">
			<documentation><![CDATA[Summary
A read/write integer property that specifies the index at which to start the next match.
Description
lastIndex is a property of an individual regular expression object.

This property is set only if the regular expression used the "g" flag to indicate a global search. The following rules apply:

If lastIndex is greater than the length of the string, regexp.test and regexp.exec fail, and lastIndex is set to 0.
If lastIndex is equal to the length of the string and if the regular expression matches the empty string, then the regular expression matches input starting at lastIndex.
If lastIndex is equal to the length of the string and if the regular expression does not match the empty string, then the regular expression mismatches input, and lastIndex is reset to 0.
Otherwise, lastIndex is set to the next position following the most recent match.
For example, consider the following sequence of statements:

re = /(hi)?/g 
Matches the empty string.
re("hi") 
Returns ["hi", "hi"] with lastIndex equal to 2.
re("hi") 
Returns [""], an empty array whose zeroth element is the match string. In this case, the empty string because lastIndex was 2 (and still is 2) and "hi" has length 2.
      ]]></documentation>
		</property>
		<property name="multiline" type="Object">
			<documentation><![CDATA[Summary
Reflects whether or not to search in strings across multiple lines.

Property of RegExp instances
Static

Description
multiline is a property of an individual regular expression object..

The value of multiline is true if the "m" flag was used; otherwise, false. The "m" flag indicates that a multiline input string should be treated as multiple lines. For example, if "m" is used, "^" and "$" change from matching at only the start or end of the entire string to the start or end of any line within the string.

You cannot change this property directly.
      ]]></documentation>
		</property>
		<property name="source" type="Object">
			<documentation><![CDATA[Summary
A read-only property that contains the text of the pattern, excluding the forward slashes.

Property of RegExp instances
Static

Description
source is a property of an individual regular expression object.

You cannot change this property directly.
]]></documentation>
		</property>
		<method name="exec" return-type="Array">
			<params>
				<parameter name="str" type="String" optional="false"><![CDATA[                   The string used between the array objects                ]]></parameter>
			</params>
			<documentation><![CDATA[Summary
Executes a search for a match in a specified string. Returns a result array, or null.

Method of RegExp

Syntax
var result1 = regexp.exec(str);
var result2 = regexp(str); // Mozilla extension
Parameters
regexp 
The name of the regular expression. It can be a variable name or a literal.
str 
The string against which to match the regular expression.
Description
As shown in the syntax description, a regular expression's exec method can be called either directly, (with regexp.exec(str)) or indirectly (with regexp(str)).

If you are executing a match simply to find true or false, use the test method or the String search method.

If the match succeeds, the exec method returns an array and updates properties of the regular expression object. If the match fails, the exec method returns null.

Consider the following example:

// Match one d followed by one or more b's followed by one d
// Remember matched b's and the following d
// Ignore case
var myRe = /d(b+)(d)/ig;
var myArray = myRe.exec("cdbBdbsbz");
The following table shows the results for this script:

Object  Property/Index  Description Example
myArray     The content of myArray. ["dbBd", "bB", "d"]
index   The 0-based index of the match in the string.   1
input   The original string.    cdbBdbsbz
[0] The last matched characters dbBd
[1], ...[n] The parenthesized substring matches, if any. The number of possible parenthesized substrings is unlimited.  [1] = bB
[2] = d
myRe    lastIndex   The index at which to start the next match. 5
ignoreCase  Indicates if the "i" flag was used to ignore case.  true
global  Indicates if the "g" flag was used for a global match.  true
multiline   Indicates if the "m" flag was used to search in strings across multiple line.   false
source  The text of the pattern.    d(b+)(d)
If your regular expression uses the "g" flag, you can use the exec method multiple times to find successive matches in the same string. When you do so, the search starts at the substring of str specified by the regular expression's lastIndex property. For example, assume you have this script:

var myRe = /ab*/g;
var str = "abbcdefabh";
var myArray;
while ((myArray = myRe.exec(str)) != null)
{
  var msg = "Found " + myArray[0] + ".  ";
  msg += "Next match starts at " + myRe.lastIndex;
  print(msg);
}
This script displays the following text:

Found abb. Next match starts at 3
Found ab. Next match starts at 9
Examples
Example: Using exec
In the following example, the function executes a match against the input. It then cycles through the array to see if other names match the user's name.

This script assumes that first names of registered party attendees are preloaded into the array A, perhaps by gathering them from a party database.

var A = ["Frank", "Emily", "Jane", "Harry", "Nick", "Beth", "Rick",
         "Terrence", "Carol", "Ann", "Terry", "Frank", "Alice", "Rick",
         "Bill", "Tom", "Fiona", "Jane", "William", "Joan", "Beth"];

function lookup(input)
{
  var firstName = /\w+/i.exec(input);
  if (!firstName)
  {
    print(input + " isn't a name!");
    return;
  }

  var count = 0;
  for (var i = 0; i < A.length; i++)
  {
    if (firstName[0].toLowerCase() == A[i].toLowerCase())
      count++;
  }
  var midstring = count == 1
                ? " other has ";
                : " others have ";
  print("Thanks, " + count + midstring + "the same name!")
}

                      ]]></documentation>
		</method>
		<method name="test" return-type="Boolean">
			<params>
				<parameter name="str" type="String" optional="false"><![CDATA[                   The string used between the array objects                ]]></parameter>
			</params>
			<documentation><![CDATA[
Summary
Executes the search for a match between a regular expression and a specified string. Returns true or false.

Method of RegExp
Implemented in: JavaScript 1.2, NES3.0
ECMA Version:   ECMA-262, Edition 3
Syntax
regexp.test([str])

Parameters
regexp 
The name of the regular expression. It can be a variable name or a literal.
str 
The string against which to match the regular expression.
Description
When you want to know whether a pattern is found in a string use the test method (similar to the String.search method); for more information (but slower execution) use the exec method (similar to the String.match method).

Examples
Example: Using test
The following example prints a message which depends on the success of the test:

function testinput(re, str){
   if (re.test(str))
      midstring = " contains ";
   else
      midstring = " does not contain ";
   document.write (str + midstring + re.source);
}
                               ]]></documentation>
		</method>
		<method name="toString" return-type="String">
			<documentation><![CDATA[
Summary
Returns a string representing the specified object.

Syntax
regexp.toString()

Parameters
None.

Description
The RegExp object overrides the toString method of the Object object; it does not inherit Object.toString. For RegExp objects, the toString method returns a string representation of the regular expression.

Examples
Example: Using toString
The following example displays the string value of a RegExp object:

myExp = new RegExp("a+b+c");
alert(myExp.toString());       // displays "/a+b+c/"
                               ]]></documentation>
		</method>
	</object>
	<object name="Array">
		<documentation><![CDATA[Array

Summary
Lets you work with arrays.

Syntax
var arr1 = new Array(arrayLength);
var arr2 = new Array(element0, element1, ..., elementN);
Array literals use the form:

var lit = [element0, element1, ..., elementN];
Parameters
arrayLength 
The initial length of the array. You can access this value using the length property. If the value specified is not a number, an array of length 1 is created, with the first element having the specified value. The maximum length allowed for an array is 4,294,967,295.
elementN 
A value for the element in that position in the array. When this form is used, the array is initialized with the specified values as its elements, and the array's length property is set to the number of arguments.
Description
An array is an ordered set of values associated with a single variable name. Note that you shouldn't use it as an associative array, use Object instead.

The following example creates an Array object with an array literal; the coffees array contains three elements and has a length of three:

var coffees = ["Kenyan", "Columbian", "Kona"];
You can construct a dense array of two or more elements starting with index 0 if you define initial values for all elements. A dense array is one in which each element has a value. The following code creates a dense array with three elements:

var myArray = new Array("Hello", myVar, 3.14159);
Indexing an array
You index an array by its ordinal number. For example, assume you define the following array:

var myArray = new Array("Wind", "Rain", "Fire");
You can then refer to the elements as thus:

myArray[0] is the first element
myArray[1] is the second element
myArray[2] is the third element
Specifying a single parameter
When you specify a single numeric parameter with the Array constructor, you specify the initial length of the array. The following code creates an array of five elements:

var billingMethod = new Array(5);
The behavior of the Array constructor depends on whether the single parameter is a number.

If the value specified is a number, the constructor converts the number to an unsigned, 32-bit integer and generates an array with the length property (size of the array) set to the integer. The array initially contains no elements, even though it might have a non-zero length.
If the value specified is not a number, an array of length 1 is created, with the first element having the specified value.
The following code creates an array of length 25, then assigns values to the first three elements:

var musicTypes = new Array(25);
musicTypes[0] = "R&B";
musicTypes[1] = "Blues";
musicTypes[2] = "Jazz";
Increasing the array length indirectly
An array's length increases if you assign a value to an element higher than the current length of the array. The following code creates an array of length 0, then assigns a value to element 99. This changes the length of the array to 100.

var colors = new Array();
colors[99] = "midnightblue";
Creating an array using the result of a match
The result of a match between a regular expression and a string can create an array. This array has properties and elements that provide information about the match. An array is the return value of RegExp.exec, String.match, and String.replace. To help explain these properties and elements, look at the following example and then refer to the table below:

// Match one d followed by one or more b's followed by one d
// Remember matched b's and the following d
// Ignore case

var myRe = /d(b+)(d)/i;
var myArray = myRe.exec("cdbBdbsbz");
Examples
Example: Creating an Array
The following example creates an array, msgArray, with a length of 0, then assigns values to msgArray[0] and msgArray[99], changing the length of the array to 100.

var msgArray = new Array();
msgArray[0] = "Hello";
msgArray[99] = "world";

if (msgArray.length == 100)
   print("The length is 100.");
Example: Creating a Two-dimensional Array
The following creates chess board as a two dimensional array of strings. The first move is made by copying the 'P' in 1,4 to 3,4. The position 1,4 is left blank.

var board = 
[ ['R','N','B','Q','K','B','N','R'],
  ['P','P','P','P','P','P','P','P'],
  [' ',' ',' ',' ',' ',' ',' ',' '],
  [' ',' ',' ',' ',' ',' ',' ',' '],
  [' ',' ',' ',' ',' ',' ',' ',' '],
  [' ',' ',' ',' ',' ',' ',' ',' '],
  ['p','p','p','p','p','p','p','p'],
  ['r','n','b','q','k','b','n','r']];
print(board.join('\n') + '\n\n');

// Move King's Pawn forward 2
board[3][4] = board[1][4];
board[1][4] = ' ';
print(board.join('\n'));
Here is the output:

R,N,B,Q,K,B,N,R
P,P,P,P,P,P,P,P
 , , , , , , , 
 , , , , , , , 
 , , , , , , , 
 , , , , , , , 
p,p,p,p,p,p,p,p
r,n,b,q,k,b,n,r

R,N,B,Q,K,B,N,R
P,P,P,P, ,P,P,P
 , , , , , , , 
 , , , ,P, , , 
 , , , , , , , 
 , , , , , , , 
p,p,p,p,p,p,p,p
r,n,b,q,k,b,n,r      ]]></documentation>
		<property name="length" type="Integer">
			<documentation><![CDATA[Description
The value of the length property is an integer with a positive sign and a value less than 2 to the 32 power (232).

You can set the length property to truncate an array at any time. When you extend an array by changing its length property, the number of actual elements does not increase; for example, if you set length to 3 when it is currently 2, the array still contains only 2 elements.

Examples
Example: Iterating over an array
In the following example the array numbers is iterated through by looking at the length property to see how many elements it has. Each value is then doubled.

var numbers = [1,2,3,4,5];
for (var i = 0; i < numbers.length; i++) {
  numbers[i] *= 2;
}
// numbers is now [2,4,6,8,10];
Example: Shortening an array
The following example shortens the array statesUS to a length of 50 if the current length is greater than 50.

if (statesUS.length > 50) {
   statesUS.length=50
}          ]]></documentation>
		</property>
		<method name="concat" return-type="Array" showInRootAC="false">
			<params>
				<parameter name="array" type="Array" optional="false"><![CDATA[                  Array to add to this one             ]]></parameter>
			</params>
			<documentation><![CDATA[Summary
Returns a new array comprised of this array joined with other array(s) and/or value(s).
Syntax
var resultArray = array.concat(value1, value2, ..., valueN);
Parameters
valueN 
Arrays and/or values to concatenate to the resulting array.
Description
concat creates a new array consisting of the elements in the this object on which it is called, followed in order by, for each argument, the elements of that argument (if the argument is an array) or the argument itself (if the argument is not an array).

concat does not alter this or any of the arrays provided as arguments but instead returns a "one level deep" copy that contains copies of the same elements combined from the original arrays. Elements of the original arrays are copied into the new array as follows:

Object references (and not the actual object): concat copies object references into the new array. Both the original and new array refer to the same object. That is, if a referenced object is modified, the changes are visible to both the new and original arrays.
Strings and numbers (not String and Number objects): concat copies the values of strings and numbers into the new array.
Any operation on the new array will have no effect on the original arrays, and vice versa.

Examples
Example: Concatenating two arrays
The following code concatenates two arrays:

var alpha = ["a", "b", "c"];
var numeric = [1, 2, 3];

// creates array ["a", "b", "c", 1, 2, 3]; alpha and numeric are unchanged
var alphaNumeric = alpha.concat(numeric);
Example: Concatenating three arrays
The following code concatenates three arrays:

var num1 = [1, 2, 3];
var num2 = [4, 5, 6];
var num3 = [7, 8, 9];

// creates array [1, 2, 3, 4, 5, 6, 7, 8, 9]; num1, num2, num3 are unchanged
var nums = num1.concat(num2, num3);
Example: Concatenating values to an array
The following code concatenates three values to an array:

var alpha = ['a', 'b', 'c'];

// creates array ["a", "b", "c", 1, 2, 3], leaving alpha unchanged
var alphaNumeric = alpha.concat(1, [2, 3]);
            ]]></documentation>
		</method>
		<method name="join" return-type="String">
			<params>
				<parameter name="separator" type="String" optional="false"><![CDATA[                  The string used between the array objects                ]]></parameter>
			</params>
			<documentation><![CDATA[Summary
Joins all elements of an array into a string.
Syntax
join(separator)

Parameters
separator 
Specifies a string to separate each element of the array. The separator is converted to a string if necessary. If omitted, the array elements are separated with a comma.
Description
The string conversions of all array elements are joined into one string.

Examples
Example: Joining an array three different ways
The following example creates an array, a, with three elements, then joins the array three times: using the default separator, then a comma and a space, and then a plus.

var a = new Array("Wind","Rain","Fire");
var myVar1 = a.join();      // assigns "Wind,Rain,Fire" to myVar1
var myVar2 = a.join(", ");  // assigns "Wind, Rain, Fire" to myVar2
var myVar3 = a.join(" + "); // assigns "Wind + Rain + Fire" to myVar3
                        ]]></documentation>
		</method>
		<method name="pop" return-type="ANY">
			<documentation><![CDATA[ Summary
Removes the last element from an array and returns that element.
Syntax
array.pop()

Description
The pop method removes the last element from an array and returns that value to the caller.

pop is intentionally generic; this method can be called or applied to objects resembling arrays. Objects which do not contain a length property reflecting the last in a series of consecutive, zero-based numerical properties may not behave in any meaningful manner.

Example
Example: Removing the last element of an array
The following code creates the myFish array containing four elements, then removes its last element.

myFish = ["angel", "clown", "mandarin", "surgeon"];
popped = myFish.pop();
]]></documentation>
		</method>
		<method name="push" return-type="Number">
			<params>
				<parameter name="element" type="ANY" optional="false"><![CDATA[                    Element to put into the array                ]]></parameter>
			</params>
			<documentation><![CDATA[Summary
Mutates an array by appending the given elements and returning the new length of the array.
Syntax
array.push(element1, ..., elementN)

Parameters
element1, ..., elementN
The elements to add to the end of the array.
Description
The push method is useful for easily appending values to an array. The return value of this method is the new length property of the object upon which the method was called.

push is intentionally generic. This method can be called or applied to objects resembling arrays. The push method relies on a length property to determine where to start inserting the given values. If the length property cannot be converted into a number, the index used is 0. This includes the possibility of length being nonexistent, in which case length will also be created.

The only native, array-like objects are strings, although they are not suitable in applications of this method, as strings are immutable.

Examples
Example: Adding elements to an array
The following code creates the myFish array containing two elements, then appends two elements to it. After the code executes, pushed contains 4.

var myFish = ["angel", "clown"];
var pushed = myFish.push("drum", "lion");
]]></documentation>
		</method>
		<method name="reverse" return-type="VOID" showInRootAC="false">
			<documentation><![CDATA[ Summary
Transposes the elements of an array: the first array element becomes the last and the last becomes the first.
Syntax
array.reverse();
Parameters
None.

Description
The reverse method transposes the elements of the calling array object in place, mutating the array.

Examples
Example: Reversing the elements in an array
The following example creates an array myArray, containing three elements, then reverses the array.

var myArray = ["one", "two", "three"];
myArray.reverse();
This code changes myArray so that:

myArray[0] is "three"
myArray[1] is "two"
myArray[2] is "one"]]></documentation>
		</method>
		<method name="shift" return-type="ANY" showInRootAC="false">
			<documentation><![CDATA[Summary
Removes the first element from an array and returns that element. This method changes the length of the array.
Syntax
array.shift()

Description
The shift method removes the element at the zeroeth index and shifts the values at consecutive indexes down, then returns the removed value.

shift is intentionally generic; this method can be called or applied to objects resembling arrays. Objects which do not contain a length property reflecting the last in a series of consecutive, zero-based numerical properties may not behave in any meaningful manner.

Examples
Example: Removing an element from an array
The following code displays the myFish array before and after removing its first element. It also displays the removed element:

// assumes a println function is defined
var myFish = ["angel", "clown", "mandarin", "surgeon"];
println("myFish before: " + myFish);
var shifted = myFish.shift();
println("myFish after: " + myFish);
println("Removed this element: " + shifted);
This example displays the following:

myFish before: ["angel", "clown", "mandarin", "surgeon"]
myFish after: ["clown", "mandarin", "surgeon"]
Removed this element: angel]]></documentation>
		</method>
		<method name="slice" return-type="Array">
			<params>
				<parameter name="begin" type="Number" optional="false"><![CDATA[                   Start of slice to return             ]]></parameter>
				<parameter name="end" type="Number" optional="true"><![CDATA[                 End of slice to return               ]]></parameter>
			</params>
			<documentation><![CDATA[Summary
Extracts a section of an array and returns a new array.
Syntax
slice(begin[,end])

Parameters
begin 
Zero-based index at which to begin extraction.
As a negative index, start indicates an offset from the end of the sequence. slice(-2) extracts the second-to-last element and the last element in the sequence.
end 
Zero-based index at which to end extraction. slice extracts up to but not including end.
slice(1,4) extracts the second element through the fourth element (elements indexed 1, 2, and 3).
As a negative index, end indicates an offset from the end of the sequence. slice(2,-1) extracts the third element through the second-to-last element in the sequence.
If end is omitted, slice extracts to the end of the sequence.
Description
slice does not alter the original array, but returns a new "one level deep" copy that contains copies of the elements sliced from the original array. Elements of the original array are copied into the new array as follows:

For object references (and not the actual object), slice copies object references into the new array. Both the original and new array refer to the same object. If a referenced object changes, the changes are visible to both the new and original arrays.
For strings and numbers (not String and Number objects), slice copies strings and numbers into the new array. Changes to the string or number in one array does not affect the other array.
If a new element is added to either array, the other array is not affected.

Examples
Example: Using slice
In the following example, slice creates a new array, newCar, from myCar. Both include a reference to the object myHonda. When the color of myHonda is changed to purple, both arrays reflect the change.


// Using slice, create newCar from myCar.
var myHonda = { color: "red", wheels: 4, engine: { cylinders: 4, size: 2.2 } };
var myCar = [myHonda, 2, "cherry condition", "purchased 1997"];
var newCar = myCar.slice(0, 2);

// Print the values of myCar, newCar, and the color of myHonda
//  referenced from both arrays.
print("myCar = " + myCar.toSource());
print("newCar = " + newCar.toSource());
print("myCar[0].color = " + myCar[0].color);
print("newCar[0].color = " + newCar[0].color);

// Change the color of myHonda.
myHonda.color = "purple";
print("The new color of my Honda is " + myHonda.color);

// Print the color of myHonda referenced from both arrays.
print("myCar[0].color = " + myCar[0].color);
print("newCar[0].color = " + newCar[0].color);
This script writes:

myCar = [{color:"red", wheels:4, engine:{cylinders:4, size:2.2}}, 2, "cherry condition", "purchased 1997"]
newCar = [{color:"red", wheels:4, engine:{cylinders:4, size:2.2}}, 2]
myCar[0].color = red 
newCar[0].color = red
The new color of my Honda is purple
myCar[0].color = purple
newCar[0].color = purple           ]]></documentation>
		</method>
		<method name="sort" return-type="VOID">
			<params>
				<parameter name="compareFunction" type="ANY" optional="false"><![CDATA[                  Function to compare items                ]]></parameter>
			</params>
			<documentation><![CDATA[Summary
Sorts the elements of an array in place. 
Syntax
array.sort(compareFunction);
Parameters
compareFunction 
Specifies a function that defines the sort order. If omitted, the array is sorted lexicographically (in dictionary order) according to the string conversion of each element.
Description
If compareFunction is not supplied, elements are sorted by converting them to strings and comparing strings in lexicographic ("dictionary" or "telephone book," not numerical) order. For example, "80" comes before "9" in lexicographic order, but in a numeric sort 9 comes before 80.

If compareFunction is supplied, the array elements are sorted according to the return value of the compare function. If a and b are two elements being compared, then:

If compareFunction(a, b) is less than 0, sort a to a lower index than b.
If compareFunction(a, b) returns 0, leave a and b unchanged with respect to each other, but sorted with respect to all different elements. Note: the ECMAscript standard does not guarantee this behaviour, and thus not all browsers (e.g. Mozilla versions dating back to at least 2003) respect this.
If compareFunction(a, b) is greater than 0, sort b to a lower index than a.
So, the compare function has the following form:

function compare(a, b)
{
  if (a is less than b by some ordering criterion)
     return -1;
  if (a is greater than b by the ordering criterion)
     return 1;
  // a must be equal to b
  return 0;
}
To compare numbers instead of strings, you should not subtract the numbers because this can cause overflow. For example, 9e307-(-9e307) equals Number.POSITIVE_INFINITY but so does 9e307-(-9.9e307). Following the same general compare form, one achieves a compare function that works on any numeric level:

function compareNumbers(a, b) {
  if(a > b)
    return 1;
  if(a < b)
    return -1;
  return 0;
}

var a = [];
a[0] = "Ant";
a[5] = "Zebra";

// assumes a print function is defined
function writeArray(x)
{
  for (i = 0; i < x.length; i++)
  {
    print(x[i]);
    if (i < x.length-1)
      print(", ");
  }
}

writeArray(a);
a.sort();
print("\n");
writeArray(a);
In JavaScript 1.1, JavaScript prints:

ant, null, null, null, null, zebra
ant, null, null, null, null, zebra
In JavaScript 1.2, JavaScript prints:

ant, undefined, undefined, undefined, undefined, zebra
ant, zebra, undefined, undefined, undefined, undefined
Examples
Example: Creating, displaying, and sorting an array
The following example creates four arrays and displays the original array, then the sorted arrays. The numeric arrays are sorted without, then with, a compare function.

var stringArray = ["Blue", "Humpback", "Beluga"];
var numericStringArray = ["80", "9", "700"];
var numberArray = [40, 1, 5, 200];
var mixedNumericArray = ["80", "9", "700", 40, 1, 5, 200];

function compareNumbers(a, b)
{
  return a - b;
}

// again, assumes a print function is defined
print("stringArray: " + stringArray.join() +"\n");
print("Sorted: " + stringArray.sort() +"\n\n");

print("numberArray: " + numberArray.join() +"\n");
print("Sorted without a compare function: " + numberArray.sort() +"\n");
print("Sorted with compareNumbers: " + numberArray.sort(compareNumbers) +"\n\n");

print("numericStringArray: " + numericStringArray.join() +"\n");
print("Sorted without a compare function: " + numericStringArray.sort() +"\n");
print("Sorted with compareNumbers: " + numericStringArray.sort(compareNumbers) +"\n\n");
print("mixedNumericArray: " + mixedNumericArray.join() +"\n");
print("Sorted without a compare function: " + mixedNumericArray.sort() +"\n");
print("Sorted with compareNumbers: " + mixedNumericArray.sort(compareNumbers) +"\n\n");
This example produces the following output. As the output shows, when a compare function is used, numbers sort correctly whether they are numbers or numeric strings.

stringArray: Blue,Humpback,Beluga
Sorted: Beluga,Blue,Humpback

numberArray: 40,1,5,200
Sorted without a compare function: 1,200,40,5
Sorted with compareNumbers: 1,5,40,200

numericStringArray: 80,9,700
Sorted without a compare function: 700,80,9
Sorted with compareNumbers: 9,80,700

mixedNumericArray: 80,9,700,40,1,5,200
Sorted without a compare function: 1,200,40,5,700,80,9
Sorted with compareNumbers: 1,5,9,40,80,200,700            ]]></documentation>
		</method>
		<method name="unshift" return-type="Number" showInRootAC="false">
			<params>
				<parameter name="element" type="ANY" optional="false"><![CDATA[                  Element to put into the array                ]]></parameter>
			</params>
			<documentation><![CDATA[Summary
Adds one or more elements to the beginning of an array and returns the new length of the array.
Syntax
arrayName.unshift(element1, ..., elementN)

Parameters
element1, ..., elementN
The elements to add to the front of the array.
Description
The unshift method inserts the given values to the beginning of an array-like object.

unshift is intentionally generic; this method can be called or applied to objects resembling arrays. Objects which do not contain a length property reflecting the last in a series of consecutive, zero-based numerical properties may not behave in any meaningful manner.

Examples
Example: Adding elements to an array
The following code displays the myFish array before and after adding elements to it.

// assumes a println function exists
myFish = ["angel", "clown"];
println("myFish before: " + myFish);
unshifted = myFish.unshift("drum", "lion");
println("myFish after: " + myFish);
println("New length: " + unshifted);
This example displays the following:

myFish before: ["angel", "clown"]
myFish after: ["drum", "lion", "angel", "clown"]
New length: 4
]]></documentation>
		</method>
		<method name="splice" return-type="Array" showInRootAC="false">
			<params>
				<parameter name="index" type="Number" optional="false"><![CDATA[Index at which to start changing the array. If negative, will begin that many elements from the end.              ]]></parameter>
				<parameter name="howMany" type="Number" optional="false"><![CDATA[An integer indicating the number of old array elements to remove. If howMany is 0, no elements are removed. In this case, you should specify at least one new element. If no howMany parameter is specified (second syntax above, which is a SpiderMonkey extension), all elements after index are removed. ]]></parameter>
				<parameter name="element1, ..., elementN" type="Object"
					optional="true"><![CDATA[The elements to add to the array. If you don't specify any elements, splice simply removes elements from the array.]]></parameter>
			</params>
			<documentation><![CDATA[Summary
Changes the content of an array, adding new elements while removing old elements.
Syntax
array.splice(index, howMany, [element1][, ..., elementN]);

Parameters
index 
Index at which to start changing the array. If negative, will begin that many elements from the end.
howMany 
An integer indicating the number of old array elements to remove. If howMany is 0, no elements are removed. In this case, you should specify at least one new element. If no howMany parameter is specified (second syntax above, which is a SpiderMonkey extension), all elements after index are removed.
element1, ..., elementN 
The elements to add to the array. If you don't specify any elements, splice simply removes elements from the array.
Description
If you specify a different number of elements to insert than the number you're removing, the array will have a different length at the end of the call.

The splice method returns an array containing the removed elements. If only one element is removed, an array of one element is returned.

Examples
Example: Using splice
The following script illustrate the use of splice:

// assumes a print function is defined
var myFish = ["angel", "clown", "mandarin", "surgeon"];
print("myFish: " + myFish);

var removed = myFish.splice(2, 0, "drum");
print("After adding 1: " + myFish);
print("removed is: " + removed);

removed = myFish.splice(3, 1);
print("After removing 1: " + myFish);
print("removed is: " + removed);

removed = myFish.splice(2, 1, "trumpet");
print("After replacing 1: " + myFish);
print("removed is: " + removed);

removed = myFish.splice(0, 2, "parrot", "anemone", "blue");
print("After replacing 2: " + myFish);
print("removed is: " + removed);
This script displays:

myFish: angel,clown,mandarin,surgeon
After adding 1: angel,clown,drum,mandarin,surgeon
removed is: 
After removing 1: angel,clown,drum,surgeon
removed is: mandarin
After replacing 1: angel,clown,trumpet,surgeon
removed is: drum
After replacing 2: parrot,anemone,blue,trumpet,surgeon
removed is: angel,clown
]]></documentation>
		</method>
		<method name="indexOf" return-type="Number" showInRootAC="false">
			<params>
				<parameter name="searchElement" type="Object" optional="false"><![CDATA[Element to locate in the array.]]></parameter>
				<parameter name="fromIndex" type="Number" optional="false"><![CDATA[The index at which to begin the search. Defaults to 0, i.e. the whole array will be searched. If the index is greater than or equal to the length of the array, -1 is returned, i.e. the array will not be searched. If negative, it is taken as the offset from the end of the array. Note that even when the index is negative, the array is still searched from front to back. If the calculated index is less than 0, the whole array will be searched.]]></parameter>
			</params>
			<documentation><![CDATA[indexOf

Summary
Returns the first index at which a given element can be found in the array, or -1 if it is not present.

Method of Array
Implemented in:	JavaScript 1.6 (Gecko 1.8b2 and later)
ECMAScript Edition:	none
Syntax
var index = array.indexOf(searchElement[, fromIndex]);
Parameters
searchElement 
Element to locate in the array.
fromIndex 
The index at which to begin the search. Defaults to 0, i.e. the whole array will be searched. If the index is greater than or equal to the length of the array, -1 is returned, i.e. the array will not be searched. If negative, it is taken as the offset from the end of the array. Note that even when the index is negative, the array is still searched from front to back. If the calculated index is less than 0, the whole array will be searched.
Description
indexOf compares searchElement to elements of the Array using strict equality (the same method used by the ===, or triple-equals, operator).

Examples
Example: Using indexOf
The following example uses indexOf to locate values in an array.

var array = [2, 5, 9];
var index = array.indexOf(2);
// index is 0
index = array.indexOf(7);
// index is -1
Example: Finding all the occurrences of an element
The following example uses indexOf to find all the indices of an element in a given array, using push to add them to another array as they are found.

var indices = [];
var idx = array.indexOf(element)
while (idx != -1)
{
  indices.push(idx);
  idx = array.indexOf(element, idx + 1);
}
]]></documentation>
		</method>
		<method name="filter" return-type="Array" showInRootAC="false">
			<params>
				<parameter name="callback " type="Function" optional="false"><![CDATA[Function to test each element of the array.]]></parameter>
				<parameter name="thisObject" type="Object" optional="false"><![CDATA[Object to use as this when executing callback.]]></parameter>
			</params>
			<documentation><![CDATA[Syntax
var filteredArray = array.filter(callback[, thisObject]);
Parameters
callback 
Function to test each element of the array.
thisObject 
Object to use as this when executing callback.
Description
filter calls a provided callback function once for each element in an array, and constructs a new array of all the values for which callback returns a true value. callback is invoked only for indexes of the array which have assigned values; it is not invoked for indexes which have been deleted or which have never been assigned values. Array elements which do not pass the callback test are simply skipped, and are not included in the new array.

callback is invoked with three arguments: the value of the element, the index of the element, and the Array object being traversed.

If a thisObject parameter is provided to filter, it will be used as the this for each invocation of the callback. If it is not provided, or is null, the global object associated with callback is used instead.

filter does not mutate the array on which it is called.

The range of elements processed by filter is set before the first invocation of callback. Elements which are appended to the array after the call to filter begins will not be visited by callback. If existing elements of the array are changed, or deleted, their value as passed to callback will be the value at the time filter visits them; elements that are deleted are not visited.

Examples
Example: Filtering out all small values
The following example uses filter to create a filtered array that has all elements with values less than 10 removed.

function isBigEnough(element, index, array) {
  return (element >= 10);
}
var filtered = [12, 5, 8, 130, 44].filter(isBigEnough);
]]></documentation>
		</method>
		<method name="lastIndexOf" return-type="Number" showInRootAC="false">
			<params>
				<parameter name="searchElement" type="Object" optional="false"><![CDATA[Element to locate in the array.]]></parameter>
				<parameter name="fromIndex" type="Number" optional="false"><![CDATA[The index at which to start searching backwards. Defaults to the array's length, i.e. the whole array will be searched. If the index is greater than or equal to the length of the array, the whole array will be searched. If negative, it is taken as the offset from the end of the array. Note that even when the index is negative, the array is still searched from back to front. If the calculated index is less than 0, -1 is returned, i.e. the array will not be searched.]]></parameter>
			</params>
			<documentation><![CDATA[Summary
Returns the last index at which a given element can be found in the array, or -1 if it is not present. The array is searched backwards, starting at fromIndex.
Syntax
var index = array.lastIndexOf(searchElement[, fromIndex]);
Parameters
searchElement 
Element to locate in the array.
fromIndex 
The index at which to start searching backwards. Defaults to the array's length, i.e. the whole array will be searched. If the index is greater than or equal to the length of the array, the whole array will be searched. If negative, it is taken as the offset from the end of the array. Note that even when the index is negative, the array is still searched from back to front. If the calculated index is less than 0, -1 is returned, i.e. the array will not be searched.
Description
lastIndexOf compares searchElement to elements of the Array using strict equality (the same method used by the ===, or triple-equals, operator).

Examples
Example: Using lastIndexOf
The following example uses lastIndexOf to locate values in an array.

var array = [2, 5, 9, 2];
var index = array.lastIndexOf(2);
// index is 3
index = array.lastIndexOf(7);
// index is -1
index = array.lastIndexOf(2, 3);
// index is 3
index = array.lastIndexOf(2, 2);
// index is 0
index = array.lastIndexOf(2, -2);
// index is 0
index = array.lastIndexOf(2, -1);
// index is 3
Example: Finding all the occurrences of an element
The following example uses lastIndexOf to find all the indices of an element in a given array, using push to add them to another array as they are found.

var indices = [];
var idx = array.lastIndexOf(element);
while (idx != -1)
{
  indices.push(idx);
  idx = (idx > 0 ? array.lastIndexOf(element, idx - 1) : -1);
}
Note that we have to handle the case idx == 0 separately here because the element will always be found regardless of the fromIndex parameter if it is the first element of the array. This is different from the indexOf method.
]]>
			</documentation>
		</method>
		<method name="forEach" return-type="VOID" showInRootAC="false">
			<params>
				<parameter name="callback" type="Function" optional="false"><![CDATA[Function to execute for each element.]]></parameter>
				<parameter name="thisObject" type="Object" optional="false"><![CDATA[Object to use as this when executing callback.]]></parameter>
			</params>
			<documentation><![CDATA[
Summary
Executes a provided function once per array element.
Syntax
array.forEach(callback[, thisObject]);
Parameters
callback 
Function to execute for each element.
thisObject 
Object to use as this when executing callback.
Description
forEach executes the provided function (callback) once for each element present in the array. callback is invoked only for indexes of the array which have assigned values; it is not invoked for indexes which have been deleted or which have never been assigned values.

callback is invoked with three arguments: the value of the element, the index of the element, and the Array object being traversed.

If a thisObject parameter is provided to forEach, it will be used as the this for each invocation of the callback. If it is not provided, or is null, the global object associated with callback is used instead.

forEach does not mutate the array on which it is called.

The range of elements processed by forEach is set before the first invocation of callback. Elements which are appended to the array after the call to forEach begins will not be visited by callback. If existing elements of the array are changed, or deleted, their value as passed to callback will be the value at the time forEach visits them; elements that are deleted are not visited.

Examples
Example: Printing the contents of an array
The following code prints a line for each element in an array:

function printElt(element, index, array) {
    print("[" + index + "] is " + element); // assumes print is already defined
}
[2, 5, 9].forEach(printElt);
// Prints:
// [0] is 2
// [1] is 5
// [2] is 9
Example: Printing the contents of an array with an object method
The following code creates a simple writer object and then uses the writeln method to write one line per element in the array:

var writer = {
    sb:       [],
    write:    function (s) {
        this.sb.push(s);
    },
    writeln:  function (s) {
        this.write(s + "\n");
    },
    toString: function () {
        return this.sb.join("");
    }
};

[2, 5, 9].forEach(writer.writeln, writer);
print(writer.toString()); // assumes print is already defined
// Prints:
// 2
// 5
// 9]]>
			</documentation>
		</method>
		<method name="every" return-type="VOID" showInRootAC="false">
			<params>
				<parameter name="callback" type="Function" optional="false"><![CDATA[Function to execute for each element.]]></parameter>
				<parameter name="thisObject" type="Object" optional="false"><![CDATA[Object to use as this when executing callback.]]></parameter>
			</params>
			<documentation><![CDATA[
Summary
Tests whether all elements in the array pass the test implemented by the provided function.
Syntax
var allPassed = array.every(callback[, thisObject]);
Parameters
callback 
Function to test for each element.
thisObject 
Object to use as this when executing callback.
Description
every executes the provided callback function once for each element present in the array until it finds one where callback returns a false value. If such an element is found, the every method immediately returns false. Otherwise, if callback returned a true value for all elements, every will return true. callback is invoked only for indexes of the array which have assigned values; it is not invoked for indexes which have been deleted or which have never been assigned values.

callback is invoked with three arguments: the value of the element, the index of the element, and the Array object being traversed.

If a thisObject parameter is provided to every, it will be used as the this for each invocation of the callback. If it is not provided, or is null, the global object associated with callback is used instead.

every does not mutate the array on which it is called.

The range of elements processed by every is set before the first invocation of callback. Elements which are appended to the array after the call to every begins will not be visited by callback. If existing elements of the array are changed, their value as passed to callback will be the value at the time every visits them; elements that are deleted are not visited.

every acts like the "for all" quantifier in mathematics. In particular, for an empty array, it returns true. (It is vacuously true that all elements of the empty set satisfy any given condition.)

Examples
Example: Testing size of all array elements
The following example tests whether all elements in the array are bigger than 10.

function isBigEnough(element, index, array) {
  return (element >= 10);
}
var passed = [12, 5, 8, 130, 44].every(isBigEnough);
// passed is false
passed = [12, 54, 18, 130, 44].every(isBigEnough);
// passed is true]]>
			</documentation>
		</method>
		<method name="map" return-type="Array" showInRootAC="false">
			<params>
				<parameter name="callback" type="Function" optional="false"><![CDATA[Function to execute for each element.]]></parameter>
				<parameter name="thisObject" type="Object" optional="false"><![CDATA[Object to use as this when executing callback.]]></parameter>
			</params>
			<documentation><![CDATA[
Summary
Creates a new array with the results of calling a provided function on every element in this array.
Syntax
var mappedArray = array.map(callback[, thisObject]);
Parameters
callback 
Function that produces an element of the new Array from an element of the current one.
thisObject 
Object to use as this when executing callback.
Description
map calls a provided callback function once for each element in an array, in order, and constructs a new array from the results. callback is invoked only for indexes of the array which have assigned values; it is not invoked for indexes which have been deleted or which have never been assigned values.

callback is invoked with three arguments: the value of the element, the index of the element, and the Array object being traversed.

If a thisObject parameter is provided to map, it will be used as the this for each invocation of the callback. If it is not provided, or is null, the global object associated with callback is used instead.

map does not mutate the array on which it is called.

The range of elements processed by map is set before the first invocation of callback. Elements which are appended to the array after the call to map begins will not be visited by callback. If existing elements of the array are changed, or deleted, their value as passed to callback will be the value at the time map visits them; elements that are deleted are not visited.

Examples
Example: Pluralizing the words (strings) in an array
The following code creates an array of "plural" forms of nouns from an array of their singular forms.

function makePseudoPlural(single)
{
  return single.replace(/o/g, "e");
}

var singles = ["foot", "goose", "moose"];
var plurals = singles.map(makePseudoPlural);
// plurals is ["feet", "geese", "meese"]
// singles is unchanged
Example: Mapping an array of numbers to an array of square roots
The following code takes an array of numbers and creates a new array containing the square roots of the numbers in the first array.

var numbers = [1, 4, 9];
var roots = numbers.map(Math.sqrt);
// roots is now [1, 2, 3]
// numbers is still [1, 4, 9]
Example: using map generically
This example shows how to use map on a string to get an array of bytes in the ASCII encoding representing the character values:

var a = Array.prototype.map.call("Hello World", 
                                 function(x) { return x.charCodeAt(0); })
// a now equals [72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100]
]]>
			</documentation>
		</method>
		<method name="some" return-type="Boolean" showInRootAC="false">
			<params>
				<parameter name="callback" type="Function" optional="false"><![CDATA[Function to execute for each element.]]></parameter>
				<parameter name="thisObject" type="Object" optional="false"><![CDATA[Object to use as this when executing callback.]]></parameter>
			</params>
			<documentation><![CDATA[
Summary
Tests whether some element in the array passes the test implemented by the provided function.
Syntax
var someElementPassed = array.some(callback[, thisObject]);
Parameters
callback 
Function to test for each element.
thisObject 
Object to use as this when executing callback.
Description
some executes the callback function once for each element present in the array until it finds one where callback returns a true value. If such an element is found, some immediately returns true. Otherwise, some returns false. callback is invoked only for indexes of the array which have assigned values; it is not invoked for indexes which have been deleted or which have never been assigned values.

callback is invoked with three arguments: the value of the element, the index of the element, and the Array object being traversed.

If a thisObject parameter is provided to some, it will be used as the this for each invocation of the callback. If it is not provided, or is null, the global object associated with callback is used instead.

some does not mutate the array on which it is called.

The range of elements processed by some is set before the first invocation of callback. Elements that are appended to the array after the call to some begins will not be visited by callback. If an existing, unvisited element of the array is changed by callback, its value passed to the visiting callback will be the value at the time that some visits that element's index; elements that are deleted are not visited.

Examples
Example: Testing size of all array elements
The following example tests whether some element in the array is bigger than 10.

function isBigEnough(element, index, array) {
  return (element >= 10);
}
var passed = [2, 5, 8, 1, 4].some(isBigEnough);
// passed is false
passed = [12, 5, 8, 1, 4].some(isBigEnough);
// passed is true
]]>
			</documentation>
		</method>
	</object>
	<object name="Math" hasStatic="true" showInRootAC="false">
		<documentation><![CDATA[Summary
A built-in object that has properties and methods for mathematical constants and functions.

Description
Unlike the other global objects, Math is not a constructor. All properties and methods of Math are static. You refer to the constant pi as Math.PI and you call the sine function as Math.sin(x), where x is the method's argument. Constants are defined with the full precision of real numbers in JavaScript.

It is often convenient to use the with statement when a section of code uses several Math constants and methods, so you don't have to type "Math" repeatedly. For example,

with (Math) {
   a = PI * r*r;
   y = r*sin(theta);
   x = r*cos(theta);
}
Properties
E
Euler's constant and the base of natural logarithms, approximately 2.718.
LN2
Natural logarithm of 2, approximately 0.693.
LN10
Natural logarithm of 10, approximately 2.302.
LOG2E
Base 2 logarithm of E, approximately 1.442.
LOG10E
Base 10 logarithm of E, approximately 0.434.
PI
Ratio of the circumference of a circle to its diameter, approximately 3.14159.
SQRT1_2
Square root of 1/2; equivalently, 1 over the square root of 2, approximately 0.707.
SQRT2
Square root of 2, approximately 1.414.
Properties inherited from Object.prototype
constructor


Methods
abs
Returns the absolute value of a number.
acos
Returns the arccosine (in radians) of a number.
asin
Returns the arcsine (in radians) of a number.
atan
Returns the arctangent (in radians) of a number.
atan2
Returns the arctangent of the quotient of its arguments.
ceil
Returns the smallest integer greater than or equal to a number.
cos
Returns the cosine of a number.
exp
Returns Enumber, where number is the argument, and E is Euler's constant, the base of the natural logarithm.
floor
Returns the largest integer less than or equal to a number.
log
Returns the natural logarithm (base E) of a number.
max
Returns the largest of zero or more numbers.
min
Returns the smallest of zero or more numbers.
pow
Returns base to the exponent power, that is, base exponent.
random
Returns a pseudo-random number between 0 and 1.
round
Returns the value of a number rounded to the nearest integer.
sin
Returns the sine of a number.
sqrt
Returns the square root of a number.
tan
Returns the tangent of a number.
toSource
Non-standard
Returns the string "Math".
]]></documentation>
		<property type="Number" name="E" static="true">
			<documentation><![CDATA[Summary
Euler's constant and the base of natural logarithms, approximately 2.718.

Property of Math
Static, Read-only

Implemented in: JavaScript 1.0, NES 2.0
ECMA Version:   ECMA-262
Description
Because E is a static property of Math, you always use it as Math.E, rather than as a property of a Math object you created.

Examples
Example: Using Math.E
The following function returns Euler's constant:

function getEuler() {
   return Math.E
}
]]></documentation>
		</property>
		<property type="Number" name="LN10" static="true">
			<documentation><![CDATA[Summary
The natural logarithm of 10, approximately 2.302.

Property of Math
Static, Read-only

Implemented in: JavaScript 1.0, NES 2.0
ECMA Version:   ECMA-262
Description
Because LN10 is a static property of Math, you always use it as Math.LN10, rather than as a property of a Math object you created.

Examples
Example: Using Math.LN10
The following function returns the natural log of 10:

function getNatLog10() {
   return Math.LN10
}
]]></documentation>
		</property>
		<property type="Number" name="LN2" static="true">
			<documentation><![CDATA[Summary
The natural logarithm of 2, approximately 0.693.

Property of Math
Static, Read-only

Description
Because LN2 is a static property of Math, you always use it as Math.LN2, rather than as a property of a Math object you created.

Examples
Example: Using Math.LN2
The following function returns the natural log of 2:

function getNatLog2() {
   return Math.LN2
}      
]]></documentation>
		</property>
		<property type="Number" name="LOG10E" static="true">
			<documentation><![CDATA[Summary
The base 10 logarithm of E (approximately 0.434).

Property of Math
Static, Read-only

Description
Because LOG10E is a static property of Math, you always use it as Math.LOG10E, rather than as a property of a Math object you created.

Examples
Example: Using Math.LOG10E
The following function returns the base 10 logarithm of E:

function getLog10e() {
   return Math.LOG10E
} 
]]></documentation>
		</property>
		<property type="Number" name="LOG2E" static="true">
			<documentation><![CDATA[Summary
The base 2 logarithm of E (approximately 1.442).

Property of Math
Static, Read-only


Description
Because LOG2E is a static property of Math, you always use it as Math.LOG2E, rather than as a property of a Math object you created.

Examples
Example: Using Math.LOG2E
The following function returns the base 2 logarithm of E:

function getLog2e() {
   return Math.LOG2E
}
]]></documentation>
		</property>
		<property type="Number" name="PI" static="true">
			<documentation><![CDATA[Summary
The ratio of the circumference of a circle to its diameter, approximately 3.14159.

Property of Math
Static, Read-only

Description
Because PI is a static property of Math, you always use it as Math.PI, rather than as a property of a Math object you created.

Examples
Example: Using PI
The following function returns the value of pi:

function getPi() {
   return Math.PI
}
]]></documentation>
		</property>
		<property type="Number" name="SQRT1_2" static="true">
			<documentation><![CDATA[Summary
The square root of 1/2; equivalently, 1 over the square root of 2, approximately 0.707.

Property of Math
Static, Read-only

Description
Because SQRT1_2 is a static property of Math, you always use it as Math.SQRT1_2, rather than as a property of a Math object you created.

Examples
Example: Using SQRT1_2
The following function returns 1 over the square root of 2:

function getRoot1_2() {
   return Math.SQRT1_2
}          
]]></documentation>
		</property>
		<property type="Number" name="SQRT2" static="true">
			<documentation><![CDATA[Summary
The square root of 2, approximately 1.414.

Property of Math
Static, Read-only

Description
Because SQRT2 is a static property of Math, you always use it as Math.SQRT2, rather than as a property of a Math object you created.

Examples
Example: Using Math.SQRT2
The following function returns the square root of 2:

function getRoot2() {
   return Math.SQRT2
}
]]></documentation>
		</property>
		<method return-type="Number" name="abs" static="true">
			<params>
				<parameter optional="false" type="Number" name="x"><![CDATA[                 ]]></parameter>
			</params>
			<documentation><![CDATA[Summary
Returns the absolute value of a number.

Method of Math
Static

Syntax
var abs = Math.abs(x);
Parameters
x 
A number.
Description
abs is a static method of Math, so you always use it as Math.abs(), rather than as a method of a Math object you created.

Examples
Example: Math.abs behavior
Passing a non-numeric string or undefined/empty variable returns NaN. Passing null returns 0.

Math.abs('-1');     // 1
Math.abs(-2);       // 2
Math.abs(null);     // 0
Math.abs("string"); // NaN
Math.abs();         // NaN        
]]></documentation>
		</method>
		<method return-type="Number" name="acos" static="true">
			<params>
				<parameter optional="false" type="Number" name="x"><![CDATA[               ]]></parameter>
			</params>
			<documentation><![CDATA[Summary
Returns the arccosine (in radians) of a number.

Method of Math
Static

Syntax
Math.acos(x)

Parameters
x 
A number.
Description
The acos method returns a numeric value between 0 and pi radians for x between -1 and 1. If the value of number is outside this range, it returns NaN.

acos is a static method of Math, so you always use it as Math.acos(), rather than as a method of a Math object you created.

Examples
Example: Using Math.acos
The following function returns the arccosine of the variable x:

function getAcos(x) {
   return Math.acos(x)
}
If you pass -1 to getAcos, it returns 3.141592653589793; if you pass 2, it returns NaN because 2 is out of range.          ]]></documentation>
		</method>
		<method return-type="Number" name="asin" static="true">
			<params>
				<parameter optional="false" type="Number" name="x"><![CDATA[               The input number for this method.                ]]></parameter>
			</params>
			<documentation><![CDATA[Summary
Returns the arcsine (in radians) of a number.

Method of Math
Static

Syntax
Math.asin(x)

Parameters
x 
A number.
Description
The asin method returns a numeric value between -pi/2 and pi/2 radians for x between -1 and 1. If the value of number is outside this range, it returns NaN.

asin is a static method of Math, so you always use it as Math.asin(), rather than as a method of a Math object you created.

Examples
Example: Using Math.asin
The following function returns the arcsine of the variable x:

function getAsin(x) {
   return Math.asin(x)
}
If you pass getAsin the value 1, it returns 1.570796326794897 (pi/2); if you pass it the value 2, it returns NaN because 2 is out of range.         ]]></documentation>
		</method>
		<method return-type="Number" name="atan" static="true">
			<params>
				<parameter optional="false" type="Number" name="x"><![CDATA[               The input number for this method.                ]]></parameter>
			</params>
			<documentation><![CDATA[Summary
Returns the arctangent (in radians) of a number.

Method of Math
Static

Implemented in:	JavaScript 1.0, NES 2.0
ECMA Version:	ECMA-262
Syntax
Math.atan(x)

Parameters
x 
A number.
Description
The atan method returns a numeric value between -pi/2 and pi/2 radians.

atan is a static method of Math, so you always use it as Math.atan(), rather than as a method of a Math object you created.

Examples
Example: Using Math.atan
The following function returns the arctangent of the variable x:

function getAtan(x) {
   return Math.atan(x)
}
If you pass getAtan the value 1, it returns 0.7853981633974483; if you pass it the value .5, it returns 0.4636476090008061.
]]></documentation>
		</method>
		<method return-type="Number" name="atan2" static="true">
			<params>
				<parameter optional="false" type="Number" name="x"><![CDATA[                  ]]></parameter>
			</params>
			<documentation><![CDATA[Summary
Returns the arctangent of the quotient of its arguments.

Method of Math
Static

Syntax
Math.atan2(y, x)

Parameters
y, x 
Numbers.
Description
The atan2 method returns a numeric value between -pi and pi representing the angle theta of an (x,y) point. This is the counterclockwise angle, measured in radians, between the positive X axis, and the point (x,y). Note that the arguments to this function pass the y-coordinate first and the x-coordinate second.

atan2 is passed separate x and y arguments, and atan is passed the ratio of those two arguments.

Because atan2 is a static method of Math, you always use it as Math.atan2(), rather than as a method of a Math object you created.

Examples
Example: Using Math.atan2
The following function returns the angle of the polar coordinate:

function getAtan2(y,x) {
   return Math.atan2(y,x)
}
If you pass getAtan2 the values (90,15), it returns 1.4056476493802699; if you pass it the values (15,90), it returns 0.16514867741462683.

Math.atan2( ±0, -0 ) returns ±PI.
Math.atan2( ±0, +0 ) returns ±0.
Math.atan2( ±0, -x ) returns ±PI for x < 0.
Math.atan2( ±0, x ) returns ±0 for x > 0.
Math.atan2( y, ±0 ) returns -PI/2 for y > 0.
Math.atan2( ±y, -Infinity ) returns ±PI for finite y > 0.
Math.atan2( ±y, +Infinity ) returns ±0 for finite y > 0.
Math.atan2( ±Infinity, +x ) returns ±PI/2 for finite x.
Math.atan2( ±Infinity, -Infinity ) returns ±3*PI/4.
Math.atan2( ±Infinity, +Infinity ) returns ±PI/4.
]]></documentation>
		</method>
		<method return-type="Number" name="ceil" static="true">
			<params>
				<parameter optional="false" type="Number" name="x"><![CDATA[               The input number for this method.                ]]></parameter>
			</params>
			<documentation><![CDATA[
Summary
Returns the smallest integer greater than or equal to a number.

Method of Math
Static

Syntax
Math.ceil(x)

Parameters
x 
A number.
Description
Because ceil is a static method of Math, you always use it as Math.ceil(), rather than as a method of a Math object you created.

Examples
Example: Using Math.ceil
The following function returns the ceil value of the variable x:

function getCeil(x) {
   return Math.ceil(x)
}
If you pass 45.95 to getCeil, it returns 46; if you pass -45.95, it returns -45.         
]]></documentation>
		</method>
		<method return-type="Number" name="cos" static="true">
			<params>
				<parameter optional="false" type="Number" name="x"><![CDATA[                The input number for this method.                ]]></parameter>
			</params>
			<documentation><![CDATA[
Summary
Returns the cosine of a number.

Method of Math
Static

Syntax
Math.cos(x)

Parameters
x 
A number.
Description
The cos method returns a numeric value between -1 and 1, which represents the cosine of the angle.

Because cos is a static method of Math, you always use it as Math.cos(), rather than as a method of a Math object you created.

Examples
Example: Using Math.cos
The following function returns the cosine of the variable x:

function getCos(x) {
   return Math.cos(x)
}
If x equals 2*Math.PI, getCos returns 1; if x equals Math.PI, the getCos method returns -1.          ]]></documentation>
		</method>
		<method return-type="Number" name="exp" static="true">
			<params>
				<parameter optional="false" type="Number" name="x"><![CDATA[                The input number for this method.                ]]></parameter>
			</params>
			<documentation><![CDATA[Summary
Returns E^x, where x is the argument, and E is Euler's constant, the base of the natural logarithms.

Method of Math
Static

Syntax
Math.exp(x)

Parameters
x 
A number.
Description
Because exp is a static method of Math, you always use it as Math.exp(), rather than as a method of a Math object you created.

Examples
Example: Using Math.exp
The following function returns the exponential value of the variable x:

function getExp(x) {
   return Math.exp(x)
}
If you pass getExp the value 1, it returns 2.718281828459045.           ]]></documentation>
		</method>
		<method return-type="Number" name="floor" static="true">
			<params>
				<parameter optional="false" type="Number" name="x"><![CDATA[              The input number for this method.                ]]></parameter>
			</params>
			<documentation><![CDATA[
Summary
Returns the largest integer less than or equal to a number.

Method of Math
Static

Syntax
Math.floor(x)

Parameters
x 
A number.
Description
Because floor is a static method of Math, you always use it as Math.floor(), rather than as a method of a Math object you created.

Examples
Example: Using Math.floor
The following function returns the floor value of the variable x:

function getFloor(x) {
   return Math.floor(x)
}
If you pass 45.95 to getFloor, it returns 45; if you pass -45.95, it returns -46.
]]></documentation>
		</method>
		<method return-type="Number" name="log" static="true">
			<params>
				<parameter optional="false" type="Number" name="x"><![CDATA[                The input number for this method.                ]]></parameter>
			</params>
			<documentation><![CDATA[
Summary
Returns the natural logarithm (base E) of a number.

Method of Math
Static

Syntax
Math.log(x)

Parameters
x 
A number.
Description
If the value of number is negative, the return value is always NaN.

Because log is a static method of Math, you always use it as Math.log(), rather than as a method of a Math object you created.

Examples
Example: Using Math.log
The following function returns the natural log of the variable x:

function getLog(x) {
   return Math.log(x)
}
If you pass getLog the value 10, it returns 2.302585092994046; if you pass it the value 0, it returns -Infinity; if you pass it the value -1, it returns NaN because -1 is out of range.          ]]></documentation>
		</method>
		<method return-type="Number" name="max" static="true">
			<params>
				<parameter optional="false" type="Number" name="x"><![CDATA[                The first input number for this method.              ]]></parameter>
				<parameter optional="false" type="Number" name="y"><![CDATA[              The second input number for this method.             ]]></parameter>
			</params>
			<documentation><![CDATA[
Summary
Returns the largest of zero or more numbers.

Method of Math
Static

Syntax
Math.max([value1[,value2[, ...]]])

Parameters
value1, value2, ... 
Numbers.
Description
Because max is a static method of Math, you always use it as Math.max(), rather than as a method of a Math object you created.

If no arguments are given, the results is -Infinity

If at least one of arguments cannot be converted to a number, the result is NaN.

Examples
Example: Using Math.max
The following function evaluates the variables x and y:

function getMax(x,y) {
   return Math.max(x,y)
}
If you pass getMax the values 10 and 20, it returns 20; if you pass it the values -10 and -20, it returns -10.        
]]></documentation>
		</method>
		<method return-type="Number" name="min" static="true">
			<params>
				<parameter optional="false" type="Number" name="x"><![CDATA[                The first input number for this method.              ]]></parameter>
				<parameter optional="false" type="Number" name="y"><![CDATA[              The second input number for this method.             ]]></parameter>
			</params>
			<documentation><![CDATA[
Summary
Returns the smallest of zero or more numbers.

Method of Math
Static

Syntax
Math.min([value1[,value2[, ...]]])

Parameters
value1, value2, ... 
Numbers.
Description
Because min is a static method of Math, you always use it as Math.min(), rather than as a method of a Math object you created.

If no arguments are given, the result is Infinity.

If at least one of arguments cannot be converted to a number, the result is NaN.

Examples
Example: Using Math.min
The following function evaluates the variables x and y:

function getMin(x,y) {
   return Math.min(x,y)
}
If you pass getMin the values 10 and 20, it returns 10; if you pass it the values -10 and -20, it returns -20.     
]]></documentation>
		</method>
		<method return-type="Number" name="pow" static="true">
			<params>
				<parameter optional="false" type="Number" name="x"><![CDATA[                The first input number for this method.              ]]></parameter>
				<parameter optional="false" type="Number" name="y"><![CDATA[              The second input number for this method.             ]]></parameter>
			</params>
			<documentation><![CDATA[
Summary
Returns base to the exponent power, that is, baseexponent.

Method of Math
Static

Syntax
Math.pow(base,exponent)

Parameters
base 
The base number.
exponents 
The exponent to which to raise base.
Description
Because pow is a static method of Math, you always use it as Math.pow(), rather than as a method of a Math object you created.

Examples
Example: Using Math.pow
function raisePower(x,y) {
   return Math.pow(x,y)
}
If x is 7 and y is 2, raisePower returns 49 (7 to the power of 2).         
]]></documentation>
		</method>
		<method return-type="Number" name="random" static="true">
			<params />
			<documentation><![CDATA[
Summary
Returns a pseudo-random number in the range [0,1) — that is, between 0 (inclusive) and 1 (exclusive). The random number generator is seeded from the current time, as in Java.

Method of Math
Static

Syntax
var randomNumber = Math.random();
Parameters
None.

Notes
Note that Math is not a constructor, so you always invoke random as Math.random() and never create instances of Math. Some may thus call the method "static" due to analogy with class-based OO languages like Java.

Examples
Example: Using Math.random
Note that as numbers in JavaScript are IEEE 754 floating point numbers with round-to-nearest-even behavior, these ranges, excluding the one for Math.random() itself, aren't exact, and depending on the bounds it's possible in extremely rare cases (on the order of 1 in 262) to calculate the usually-excluded upper bound.

// Returns a random number between 0 (inclusive) and 1 (exclusive)
function getRandom()
{
  return Math.random();
}
// Returns a random number between min and max
function getRandomArbitary(min, max)
{
  return Math.random() * (max - min) + min;
}
// Returns a random integer between min and max
// Using Math.round() will give you a non-uniform distribution!
function getRandomInt(min, max)
{
  return Math.floor(Math.random() * (max - min + 1)) + min;
}
]]></documentation>
		</method>
		<method return-type="Number" name="round" static="true">
			<params>
				<parameter optional="false" type="Number" name="x"><![CDATA[              The input number for this method.                ]]></parameter>
			</params>
			<documentation><![CDATA[
Summary
Returns the value of a number rounded to the nearest integer.

Method of Math
Static

Syntax
Math.round(x)

Parameters
x 
A number.
Description
If the fractional portion of number is .5 or greater, the argument is rounded to the next higher integer. If the fractional portion of number is less than .5, the argument is rounded to the next lower integer.

Because round is a static method of Math, you always use it as Math.round(), rather than as a method of a Math object you created.

Examples
Example: Using Math.round
//Returns the value 20
x=Math.round(20.49)

//Returns the value 21
x=Math.round(20.5)

//Returns the value -20
x=Math.round(-20.5)

//Returns the value -21
x=Math.round(-20.51)          
]]></documentation>
		</method>
		<method return-type="Number" name="sin" static="true">
			<params>
				<parameter optional="false" type="Number" name="x"><![CDATA[                The input number for this method.                ]]></parameter>
			</params>
			<documentation><![CDATA[
Summary
Returns the sine of a number.

Method of Math
Static

Syntax
Math.sin(x)

Parameters
x 
A number.
Description
The sin method returns a numeric value between -1 and 1, which represents the sine of the argument.

Because sin is a static method of Math, you always use it as Math.sin(), rather than as a method of a Math object you created.

Examples
Example: Using Math.sin
The following function returns the sine of the variable x:

function getSine(x) {
   return Math.sin(x)
}
If you pass getSine the value Math.PI/2, it returns 1.            
]]></documentation>
		</method>
		<method return-type="Number" name="sqrt" static="true">
			<params>
				<parameter optional="false" type="Number" name="x"><![CDATA[               The input number for this method.                ]]></parameter>
			</params>
			<documentation><![CDATA[
Summary
Returns the square root of a number.

Method of Math
Static

Syntax
Math.sqrt(x)

Parameters
x 
A number.
Description
If the value of number is negative, sqrt returns NaN.

Because sqrt is a static method of Math, you always use it as Math.sqrt(), rather than as a method of a Math object you created.

Examples
Example: Using Math.sqrt
The following function returns the square root of the variable x:

function getRoot(x) {
   return Math.sqrt(x)
}
If you pass getRoot the value 9, it returns 3; if you pass it the value 2, it returns 1.414213562373095.            
]]></documentation>
		</method>
		<method return-type="Number" name="tan" static="true">
			<params>
				<parameter optional="false" type="Number" name="x"><![CDATA[                The input number for this method.                ]]></parameter>
			</params>
			<documentation><![CDATA[
Summary
Returns the tangent of a number.

Method of Math
Static

Syntax
Math.tan(x)

Parameters
x 
A number representing an angle in radians.
Description
The tan method returns a numeric value that represents the tangent of the angle.

Because tan is a static method of Math, you always use it as Math.tan(), rather than as a method of a Math object you created.

Examples
Example: Using Math.tan
The following function returns the tangent of the variable x:

function getTan(x) {
   return Math.tan(x)
}
Because the Math.tan() function accepts radians, but it is often easier to work with degrees, the following function accepts a value in degrees, converts it to radians and returns the tangent.

function getTanDeg(deg) {
   var rad = deg * Math.PI/180;
   return Math.tan(rad)
}           
]]></documentation>
		</method>
	</object>
	<object name="String" showInRootAC="false">
		<documentation><![CDATA[
Summary
A string is a sequence of characters.

Syntax
new String()
new String(string)

String literals take the form:

'stringText'
"stringText"

Parameters
string
Any string.
stringText
Any series of characters that has been properly encoded.
Description
String objects are created by calling the constructor new String(). The String object wraps Javascript's string primitive data type with the methods described below. The global function String() can also be called without new in front to create a primitive string. String literals in JavaScript are primitive strings.

Because Javascript automatically converts between string primitives and String objects, you can call any of the methods of the String object on a string primitive. JavaScript automatically converts the string primitive to a temporary String object, calls the method, then discards the temporary String object. For example, you can use the String.length property on a string primitive created from a string literal:

s_obj.length;       // 3
s_prim.length;      // 3
s_also_prim.length; // 3
'foo'.length;       // 3
"foo".length;       // 3
(A string literal can use single or double quotation marks.)

String objects can be converted to primitive strings with String.valueOf().

String primitives and String objects give different results when evaluated as Javascript. Primitives are treated as source code; String objects are treated as a character sequence object. For example:

s1 = "2 + 2";               // creates a string primitive
s2 = new String("2 + 2");   // creates a String object
eval(s1);                   // returns the number 4
eval(s2);                   // returns the string "2 + 2"
eval(s2.valueOf());         // returns the number 4
Character access
There are two ways to access an individual character in a string. The first is the charAt method:

return 'cat'.charAt(1); // returns "a"
The other way is to treat the string as an array, where each index corresponds to an individual character:

return 'cat'[1]; // returns "a"
The second way (treating the string as an array) is not part of the ECMAScript; it's a JavaScript feature.
In both cases, attempting to set an individual character won't work. Trying to set a character through charAt results in an error, while trying to set a character via indexing does not throw an error, but the string itself is unchanged.

Comparing strings
C developers have the strcmp() function for comparing strings. In JavaScript, you just use the less-than and greater-than operators:

var a = "a";
var b = "b";
if (a < b) // true
  print(a + " is less than " + b);
else if (a > b)
  print(a + " is greater than " + b);
else
  print(a + " and " + b + " are equal.");       
]]></documentation>
		<property name="length" type="Number">
			<documentation><![CDATA[
Summary
The length of a string.

Property of String
Read-only

Description
This property returns the number of characters in the string. For an empty string, length is 0.

Examples
The following example displays 8 in an Alert dialog box:

var x = "Netscape";
alert("The string length is " + x.length);
]]></documentation>
		</property>
		<method name="toString" return-type="String" showInRootAC="false">
			<documentation><![CDATA[
Summary
Returns a string representing the specified object.

Syntax
toString()

Parameters
None.

Description
The String object overrides the toString method of the Object object; it does not inherit Object.toString. For String objects, the toString method returns a string representation of the object.

Examples
Example: Using toString
The following example displays the string value of a String object:

x = new String("Hello world");
alert(x.toString())      // Displays "Hello world"              
]]></documentation>
		</method>
		<method name="valueOf" return-type="String" static="true"
			showInRootAC="false">
			<params />
			<documentation><![CDATA[
Summary
Returns the primitive value of a String object.

Syntax
valueOf()

Parameters
None.

Description
The valueOf method of String returns the primitive value of a String object as a string data type. This value is equivalent to String.toString.

This method is usually called internally by JavaScript and not explicitly in code.

Examples
Example: Using valueOf
x = new String("Hello world");
alert(x.valueOf())          // Displays "Hello world"             
]]></documentation>
		</method>
		<method name="charAt" return-type="String" showInRootAC="false">
			<params>
				<parameter name="pos" type="Number" optional="false"><![CDATA[                    The character position.              ]]></parameter>
			</params>
			<documentation><![CDATA[
Summary
Returns the specified character from a string.

Method of String
Implemented in:	JavaScript 1.0, NES2.0
ECMA Version:	ECMA-262
Syntax
charAt(index)

Parameters
index 
An integer between 0 and 1 less than the length of the string.
Description
Characters in a string are indexed from left to right. The index of the first character is 0, and the index of the last character in a string called stringName is stringName.length - 1. If the index you supply is out of range, JavaScript returns an empty string.

Examples
Example: Displaying characters at different locations in a string
The following example displays characters at different locations in the string "Brave new world":

var anyString="Brave new world"

document.writeln("The character at index 0 is '" + anyString.charAt(0) + "'")
document.writeln("The character at index 1 is '" + anyString.charAt(1) + "'")
document.writeln("The character at index 2 is '" + anyString.charAt(2) + "'")
document.writeln("The character at index 3 is '" + anyString.charAt(3) + "'")
document.writeln("The character at index 4 is '" + anyString.charAt(4) + "'")
document.writeln("The character at index 999 is '" + anyString.charAt(999) + "'")
These lines display the following:

The character at index 0 is 'B'
The character at index 1 is 'r'
The character at index 2 is 'a'
The character at index 3 is 'v'
The character at index 4 is 'e'
The character at index 999 is '' 
]]></documentation>
		</method>
		<method name="charCodeAt" return-type="Number" showInRootAC="false">
			<params>
				<parameter name="pos" type="Number" optional="false"><![CDATA[                    The character position.              ]]></parameter>
			</params>
			<documentation><![CDATA[
Summary
Returns a number indicating the Unicode value of the character at the given index.

Syntax
var codepoint = string.charCodeAt(index);
Parameters
index 
An integer greater than 0 and less than the length of the string; if unspecified, defaults to 0.
Description
Unicode code points range from 0 to 1,114,111. The first 128 Unicode code points are a direct match of the ASCII character encoding. For information on Unicode, see the Core JavaScript 1.5 Guide.

Note that charCodeAt will always return a value that is less than 65,536. This is because the higher code points are represented by a pair of (lower valued) "surrogate" pseudo-characters which are used to comprise the real character. Because of this, in order to examine or reproduce the full character for individual characters of value 65,536 and above, for such characters, it is necessary to retrieve not only charCodeAt(0), but also charCodeAt(1) (as if examining/reproducing a string with two letters).

charCodeAt returns NaN if the given index is not greater than 0 and less than the length of the string.

Backward Compatibility
JavaScript 1.2
The charCodeAt method returns a number indicating the ISO-Latin-1 codeset value of the character at the given index. The ISO-Latin-1 codeset ranges from 0 to 255. The first 0 to 127 are a direct match of the ASCII character set.

Examples
Example: Using charCodeAt
The following example returns 65, the Unicode value for A.

"ABC".charCodeAt(0) // returns 65            
]]></documentation>
		</method>
		<method name="indexOf" return-type="Number">
			<params>
				<parameter name="searchString" type="String" optional="false"><![CDATA[                 The string to search for             ]]></parameter>
				<parameter name="position" type="Integer" optional="true"
					default="0"><![CDATA[                    The character position               ]]></parameter>
			</params>
			<documentation><![CDATA[
Summary
Returns the index within the calling String object of the first occurrence of the specified value, starting the search at fromIndex,
returns -1 if the value is not found.

Syntax
indexOf(searchValue[, fromIndex])

Parameters
searchValue 
A string representing the value to search for.
fromIndex 
The location within the calling string to start the search from. It can be any integer between 0 and the length of the string. The default value is 0.
Description
Characters in a string are indexed from left to right. The index of the first character is 0, and the index of the last character of a string called stringName is stringName.length - 1.

"Blue Whale".indexOf("Blue")    // returns 0
"Blue Whale".indexOf("Blute")   // returns -1
"Blue Whale".indexOf("Whale",0) // returns 5
"Blue Whale".indexOf("Whale",5) // returns 5
"Blue Whale".indexOf("",9)      // returns 9
"Blue Whale".indexOf("",10)     // returns 10
"Blue Whale".indexOf("",11)     // returns 10
The indexOf method is case sensitive. For example, the following expression returns -1:

"Blue Whale".indexOf("blue")
Examples
Example: Using indexOf and lastIndexOf
The following example uses indexOf and lastIndexOf to locate values in the string "Brave new world".

var anyString="Brave new world"


document.write("<P>The index of the first w from the beginning is " +
   anyString.indexOf("w"))          // Displays 8

document.write("<P>The index of the first w from the end is " +
   anyString.lastIndexOf("w"))      // Displays 10

document.write("<P>The index of 'new' from the beginning is " +
   anyString.indexOf("new"))        // Displays 6

document.write("<P>The index of 'new' from the end is " +
   anyString.lastIndexOf("new"))    // Displays 6
Example: indexOf and case-sensitivity
The following example defines two string variables. The variables contain the same string except that the second string contains uppercase letters. The first writeln method displays 19. But because the indexOf method is case sensitive, the string "cheddar" is not found in myCapString, so the second writeln method displays -1.

myString="brie, pepper jack, cheddar"
myCapString="Brie, Pepper Jack, Cheddar"
document.writeln('myString.indexOf("cheddar") is ' +
   myString.indexOf("cheddar"))
document.writeln('<P>myCapString.indexOf("cheddar") is ' +
   myCapString.indexOf("cheddar")) 
Example: Using indexOf to count occurrences of a letter in a string
The following example sets count to the number of occurrences of the letter x in the string str:

count = 0;
pos = str.indexOf("x");
while ( pos != -1 ) {
   count++;
   pos = str.indexOf("x",pos+1);
}
]]></documentation>
		</method>
		<method name="lastIndexOf" return-type="Number">
			<params>
				<parameter name="searchString" type="String" optional="false"><![CDATA[                 The string to search for.                ]]></parameter>
				<parameter name="position" type="Number" optional="true"
					default="0"><![CDATA[                 The character position.              ]]></parameter>
			</params>
			<documentation><![CDATA[
Summary
Returns the index within the calling String object of the last occurrence of the specified value, or -1 if not found. The calling string is searched backward, starting at fromIndex.

Method of String
Implemented in:	JavaScript 1.0, NES2.0
ECMA Version:	ECMA-262
Syntax
lastIndexOf(searchValue[, fromIndex])

Parameters
searchValue 
A string representing the value to search for.
fromIndex 
The location within the calling string to start the search from, indexed from left to right. It can be any integer between 0 and the length of the string. The default value is the length of the string.
Description
Characters in a string are indexed from left to right. The index of the first character is 0, and the index of the last character is stringName.length - 1.

"canal".lastIndexOf("a")   // returns 3
"canal".lastIndexOf("a",2) // returns 1
"canal".lastIndexOf("a",0) // returns -1
"canal".lastIndexOf("x")   // returns -1
The lastIndexOf method is case sensitive. For example, the following expression returns -1:

"Blue Whale, Killer Whale".lastIndexOf("blue") 
Examples
Example: Using indexOf and lastIndexOf
The following example uses indexOf and lastIndexOf to locate values in the string "Brave new world".

var anyString="Brave new world"

// Displays 8
document.write("<P>The index of the first w from the beginning is " +
   anyString.indexOf("w"))
// Displays 10
document.write("<P>The index of the first w from the end is " +
   anyString.lastIndexOf("w"))
// Displays 6
document.write("<P>The index of 'new' from the beginning is " +
   anyString.indexOf("new"))
// Displays 6
document.write("<P>The index of 'new' from the end is " +
   anyString.lastIndexOf("new")) 
]]></documentation>
		</method>
		<method name="replace" return-type="VOID">
			<params>
				<parameter name="searchValue" type="RegExp" optional="false"><![CDATA[                    Value to search for              ]]></parameter>
				<parameter name="replaceValue" type="Number" optional="false"><![CDATA[                  The string that will replace searchValue             ]]></parameter>
			</params>
			<documentation><![CDATA[
Summary
Finds a match between a regular expression and a string, and replaces the matched substring with a new substring.

Method of String
Implemented in:	JavaScript 1.2
JavaScript 1.3 added the ability to specify a function as the second parameter.

ECMAScript Edition:	ECMA-262 Edition 3
Syntax
var newString = str.replace(regexp/substr, newSubStr/function[, flags]);
Parameters
regexp 
A RegExp object. The match is replaced by the return value of parameter #2.
substr 
A String that is to be replaced by newSubStr.
newSubStr 
The String that replaces the substring received from parameter #1.
function 
A function to be invoked to create the new substring (to put in place of the substring received from parameter #1).
flags 
(SpiderMonkey extension) A String containing any combination of the RegExp flags: g - global match, i - ignore case, m - match over multiple lines. This parameter is only used if the first parameter is a string.
Description
This method does not change the String object it is called on. It simply returns a new string.

To perform a global search and replace, either include the g flag in the regular expression or if the first parameter is a string, include g in the flags parameter.

Specifying a string as a parameter
The replacement string can include the following special replacement patterns:

Pattern	Inserts
$$	Inserts a "$".
$&	Inserts the matched substring.
$`	Inserts the portion of the string that precedes the matched substring.
$'	Inserts the portion of the string that follows the matched substring.
$n or $nn	Where n or nn are decimal digits, inserts the nth parenthesized submatch string, provided the first argument was a RegExp object.
Specifying a function as a parameter
When you specify a function as the second parameter, the function is invoked after the match has been performed. (The use of a function in this manner is often called a lambda expression.)

In your function, you can dynamically generate the string that replaces the matched substring. The result of the function call is used as the replacement value.

The nested function can use the matched substrings to determine the new string (newSubStr) that replaces the found substring. You get the matched substrings through the parameters of your function. The first parameter of your function holds the complete matched substring. If the first argument was a RegExp object, then the following n parameters can be used for parenthetical matches, remembered submatch strings, where n is the number of submatch strings in the regular expression. Finally, the last two parameters are the offset within the string where the match occurred and the string itself. For example, the following replace method returns XXzzzz - XX , zzzz.

function replacer(str, p1, p2, offset, s)
{
  return str + " - " + p1 + " , " + p2;
}
var newString = "XXzzzz".replace(/(X*)(z*)/, replacer);
Examples
Example: Using global and ignore with replace
In the following example, the regular expression includes the global and ignore case flags which permits replace to replace each occurrence of 'apples' in the string with 'oranges'.

var re = /apples/gi;
var str = "Apples are round, and apples are juicy.";
var newstr = str.replace(re, "oranges");
print(newstr);
In this version, a string is used as the first parameter and the global and ignore case flags are specified in the flags parameter.

var str = "Apples are round, and apples are juicy.";
var newstr = str.replace("apples", "oranges", "gi");
print(newstr);
Both of these examples print "oranges are round, and oranges are juicy."

Example: Defining the regular expression in replace
In the following example, the regular expression is defined in replace and includes the ignore case flag.

var str = "Twas the night before Xmas...";
var newstr = str.replace(/xmas/i, "Christmas");
print(newstr);
This prints "Twas the night before Christmas..."

Example: Switching words in a string
The following script switches the words in the string. For the replacement text, the script uses the $1 and $2 replacement patterns.

var re = /(\w+)\s(\w+)/;
var str = "John Smith";
var newstr = str.replace(re, "$2, $1");
print(newstr);
This prints "Smith, John".

Example: Using an inline function that modifies the matched characters
In this example, all occurrences of capital letters in the string are converted to lower case, and a hyphen is inserted just before the match location. The important thing here is that additional operations are needed on the matched item before it is given back as a replacement.

The replacement function accepts the matched snippet as its parameter, and uses it to transform the case and concatenate the hyphen before returning.

function styleHyphenFormat(propertyName)
{
  function upperToHyphenLower(match)
  {
    return '-' + match.toLowerCase();
  }
  return propertyName.replace(/[A-Z]/, upperToHyphenLower);
}
Given styleHyphenFormat('borderTop'), this returns 'border-top'.

Because we want to further transform the result of the match before the final substitution is made, we must use a function. This forces the evaluation of the match prior to the toLowerCase() method. If we had tried to do this using the match without a function, the toLowerCase() would have no effect.

var newString = propertyName.replace(/[A-Z]/, '-' + '$&'.toLowerCase());  // won't work
This is because '$&'.toLowerCase() would be evaluated first as a string literal (resulting in the same '$&') before using the characters as a pattern.

Example: Replacing a Fahrenheit degree with its Celsius equivalent
The following example replaces a Fahrenheit degree with its equivalent Celsius degree. The Fahrenheit degree should be a number ending with F. The function returns the Celsius number ending with C. For example, if the input number is 212F, the function returns 100C. If the number is 0F, the function returns -17.77777777777778C.

The regular expression test checks for any number that ends with F. The number of Fahrenheit degree is accessible to the function through its second parameter, p1. The function sets the Celsius number based on the Fahrenheit degree passed in a string to the f2c function. f2c then returns the Celsius number. This function approximates Perl's s///e flag.

function f2c(x)
{
  function convert(str, p1, offset, s)
  {
    return ((p1-32) * 5/9) + "C";
  }
  var s = String(x);
  var test = /(\d+(?:\.\d*)?)F\b/g;
  return s.replace(test, convert);
}
]]></documentation>
		</method>
		<method name="search" return-type="Number">
			<params>
				<parameter name="regularExpression" type="String"
					optional="false"><![CDATA[                    The regular expression used for searching                ]]></parameter>
			</params>
			<documentation><![CDATA[
Summary
Executes the search for a match between a regular expression and this String object.

Method of String
Implemented in:	JavaScript 1.2
ECMA Version:	ECMA-262, Edition 3
Syntax
search(regexp)

Parameters
regexp 
A regular expression object. If a non-RegExp object obj is passed, it is implicitly converted to a RegExp by using new RegExp(obj).
Description
If successful, search returns the index of the regular expression inside the string. Otherwise, it returns -1.

When you want to know whether a pattern is found in a string use search (similar to the regular expression test method); for more information (but slower execution) use match (similar to the regular expression exec method).

Examples
Example: Using search
The following example prints a message which depends on the success of the test.

function testinput(re, str){
   if (str.search(re) != -1)
      midstring = " contains ";
   else
      midstring = " does not contain ";
   document.write (str + midstring + re.source);
}
]]></documentation>
		</method>
		<method name="substr" return-type="String">
			<params>
				<parameter name="startIndex" type="Number" optional="false"><![CDATA[                    The start index              ]]></parameter>
				<parameter name="length" type="Number" optional="true"><![CDATA[                  The length of the new string.                ]]></parameter>
			</params>
			<documentation><![CDATA[
Summary
Returns the characters in a string beginning at the specified location through the specified number of characters.

Method of String
Implemented in:	JavaScript 1.0, JScript 3
ECMA Version:	None, although ECMA-262 ed. 3 has a non-normative section suggesting uniform semantics for substr
Syntax
var sub = string.substr(start[, length]);
Parameters
start 
Location at which to begin extracting characters (an integer between 0 and one less than the length of the string).
length 
The number of characters to extract.
Description
start is a character index. The index of the first character is 0, and the index of the last character is 1 less than the length of the string. substr begins extracting characters at start and collects length characters (unless it reaches the end of the string first, in which case it will return fewer).

If start is positive and is greater than or equal to the length of the string, substr returns an empty string.

If start is negative, substr uses it as a character index from the end of the string. If start is negative and abs(start) is larger than the length of the string, substr uses 0 as the start index. Note: the described handling of negative values of the start argument is not supported by Microsoft JScript [1].

If length is 0 or negative, substr returns an empty string. If length is omitted, substr extracts characters to the end of the string.

Examples
Example: Using substr
Consider the following script:

// assumes a print function is defined
var str = "abcdefghij";
print("(1,2): "    + str.substr(1,2));
print("(-2,2): "   + str.substr(-2,2));
print("(1): "      + str.substr(1));
print("(-20, 2): " + str.substr(-20,2));
print("(20, 2): "  + str.substr(20,2));
This script displays:

(1,2): bc
(-2,2): ij
(1): bcdefghij
(-20, 2): ab
(20, 2):   
]]></documentation>
		</method>
		<method name="substring" return-type="String">
			<params>
				<parameter name="start" type="Number" optional="true"><![CDATA[                   The start index              ]]></parameter>
				<parameter name="end" type="Number" optional="false"><![CDATA[                    The end index                ]]></parameter>
			</params>
			<documentation><![CDATA[
Summary
Returns a subset of a String object.

Syntax
substring(indexA, [indexB])

Parameters
indexA 
An integer between 0 and one less than the length of the string.
indexB 
(optional) An integer between 0 and the length of the string.
Description
substring extracts characters from indexA up to but not including indexB. In particular:

If indexA equals indexB, substring returns an empty string.
If indexB is omitted, substring extracts characters to the end of the string.
If either argument is less than 0 or is NaN, it is treated as if it were 0.
If either argument is greater than stringName.length, it is treated as if it were stringName.length.
If indexA is larger than indexB, then the effect of substring is as if the two arguments were swapped; for example, str.substring(1, 0) == str.substring(0, 1).

Examples
Example: Using substring
The following example uses substring to display characters from the string "Mozilla":

// assumes a print function is defined
var anyString = "Mozilla";

// Displays "Moz"
print(anyString.substring(0,3));
print(anyString.substring(3,0));

// Displays "lla"
print(anyString.substring(4,7));
print(anyString.substring(7,4));

// Displays "Mozill"
print(anyString.substring(0,6));

// Displays "Mozilla"
print(anyString.substring(0,7));
print(anyString.substring(0,10));
Example: Replacing a substring within a string
The following example replaces a substring within a string. It will replace both individual characters and substrings. The function call at the end of the example changes the string "Brave New World" into "Brave New Web".

function replaceString(oldS, newS, fullS) {
// Replaces oldS with newS in the string fullS
   for (var i = 0; i < fullS.length; i++) {
      if (fullS.substring(i, i + oldS.length) == oldS) {
         fullS = fullS.substring(0, i) + newS + fullS.substring(i + oldS.length, fullS.length);
      }
   }
   return fullS;
}

replaceString("World", "Web", "Brave New World");
]]></documentation>
		</method>
		<method name="toLowerCase" return-type="String">
			<documentation><![CDATA[
Summary
Returns the calling string value converted to lowercase.

Syntax
toLowerCase()

Parameters
None.

Description
The toLowerCase method returns the value of the string converted to lowercase. toLowerCase does not affect the value of the string itself.

Examples
Example: Using toLowerCase
The following example displays the lowercase string "alphabet":

var upperText="ALPHABET"
document.write(upperText.toLowerCase())
]]></documentation>
		</method>
		<method name="toUpperCase" return-type="String">
			<documentation><![CDATA[
Summary
Returns the calling string value converted to uppercase.

Syntax
toUpperCase()

Parameters
None.

Description
The toUpperCase method returns the value of the string converted to uppercase. toUpperCase does not affect the value of the string itself.

Examples
Example: Using toUpperCase
The following example displays the string "ALPHABET":

var lowerText="alphabet"
document.write(lowerText.toUpperCase())
]]></documentation>
		</method>
		<method name="concat" return-type="String">
			<documentation><![CDATA[
Summary
Combines the text of two or more strings and returns a new string.

Method of String
Implemented in:	JavaScript 1.2, NES3.0
Syntax
concat(string2, string3[, ..., stringN])

Parameters
string2...stringN 
Strings to concatenate to this string.
Description
concat combines the text from one or more strings and returns a new string. Changes to the text in one string do not affect the other string.

Examples
Example: Using concat
The following example combines strings into a new string.

s1="Oh "
s2="what a beautiful "
s3="mornin'."
s4=s1.concat(s2,s3) // returns "Oh what a beautiful mornin'."
]]></documentation>
		</method>
		<method name="match" return-type="Boolean">
			<params>
				<parameter name="regExp" type="RegExp" optional="false"><![CDATA[                 The string to search for.                ]]></parameter>
			</params>
			<documentation><![CDATA[
Summary
Used to retrieve the matches when matching a string against a regular expression.

Syntax
match(regexp)

Parameters
regexp 
A regular expression object. If a non-RegExp object obj is passed, it is implicitly converted to a RegExp by using new RegExp(obj).
Description
If the regular expression does not include the g flag, returns the same result as regexp.exec(string).

If the regular expression includes the g flag, the method returns an Array containing all matches.

Notes
If you need to know if a string matches a regular expression regexp, use regexp.test(string).
If you only want the first match found, you might want to use regexp.exec(string) instead.
Additional Reading
See §15.5.4.10 of the ECMA-262 specification.
Examples
Example: Using match
In the following example, match is used to find "Chapter" followed by 1 or more numeric characters followed by a decimal point and numeric character 0 or more times. The regular expression includes the i flag so that case will be ignored.

<script type="text/javascript">
str = "For more information, see Chapter 3.4.5.1";
re = /(chapter \d+(\.\d)*)/i;
found = str.match(re);
document.write(found);
</script>
This returns the array containing Chapter 3.4.5.1,Chapter 3.4.5.1,.1

"Chapter 3.4.5.1" is the first match and the first value remembered from (Chapter \d+(\.\d)*).

".1" is the second value remembered from (\.\d).

Example: Using global and ignore case flags with match
The following example demonstrates the use of the global and ignore case flags with match. All letters A through E and a through e are returned, each its own element in the array

var str = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
var regexp = /[A-E]/gi;
var matches_array = str.match(regexp);
document.write(matches_array);
matches_array now equals ['A', 'B', 'C', 'D', 'E', 'a', 'b', 'c', 'd', 'e']
]]></documentation>
		</method>
		<method name="slice" return-type="String">
			<params>
				<parameter name="beginSlice" type="Number" optional="false"><![CDATA[                              ]]></parameter>
				<parameter name="endSlice" type="Number" optional="false"><![CDATA[                         ]]></parameter>
			</params>
			<documentation><![CDATA[
Summary
Extracts a section of a string and returns a new string.

Syntax
var sub = string.slice(beginslice[, endSlice]);
Parameters
beginSlice 
The zero-based index at which to begin extraction.
endSlice 
The zero-based index at which to end extraction. If omitted, slice extracts to the end of the string.
Description
slice extracts the text from one string and returns a new string. Changes to the text in one string do not affect the other string.

slice extracts up to but not including endSlice. string.slice(1,4) extracts the second character through the fourth character (characters indexed 1, 2, and 3).

As a negative index, endSlice indicates an offset from the end of the string. string.slice(2,-1) extracts the third character through the second to last character in the string.

Examples
Example: Using slice to create a new string
The following example uses slice to create a new string.

// assumes a print function is defined
var str1 = "The morning is upon us.";
var str2 = str1.slice(4, -2);
print(str2);
This writes:

morning is upon u
]]></documentation>
		</method>
		<method name="split" return-type="String []">
			<params>
				<parameter name="separator" type="String" optional="true"><![CDATA[                              ]]></parameter>
				<parameter name="limit" type="Number" optional="true"><![CDATA[                         ]]></parameter>
			</params>
			<documentation><![CDATA[
Summary
Splits a String object into an array of strings by separating the string into substrings.

Syntax
var splits = str.split([separator][, limit]);
Parameters
separator 
Specifies the character to use for separating the string. The separator is treated as a string or a regular expression. If separator is omitted, the array returned contains one element consisting of the entire string.
limit 
Integer specifying a limit on the number of splits to be found.
Description
The split method returns the new array.

When found, separator is removed from the string and the substrings are returned in an array. If separator is omitted, the array contains one element consisting of the entire string.

If separator is a regular expression that contains capturing parentheses, then each time separator is matched the results (including any undefined results) of the capturing parentheses are spliced into the output array. However, not all browsers support this capability.

Note: When the string is empty, split returns an array containing one empty string, rather than an empty array.

Examples
Example: Using split
The following example defines a function that splits a string into an array of strings using the specified separator. After splitting the string, the function displays messages indicating the original string (before the split), the separator used, the number of elements in the array, and the individual array elements.

function splitString(stringToSplit,separator)
{
  var arrayOfStrings = stringToSplit.split(separator);
  print('The original string is: "' + stringToSplit + '"');
  print('The separator is: "' + separator + '"');
  print("The array has " + arrayOfStrings.length + " elements: ");

  for (var i=0; i < arrayOfStrings.length; i++)
    print(arrayOfStrings[i] + " / ");
}

var tempestString = "Oh brave new world that has such people in it.";
var monthString = "Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec";

var space = " ";
var comma = ",";

splitString(tempestString, space);
splitString(tempestString);
splitString(monthString, comma);
This example produces the following output:

The original string is: "Oh brave new world that has such people in it."
The separator is: " "
The array has 10 elements: Oh / brave / new / world / that / has / such / people / in / it. /

The original string is: "Oh brave new world that has such people in it."
The separator is: "undefined"
The array has 1 elements: Oh brave new world that has such people in it. /

The original string is: "Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec"
The separator is: ","
The array has 12 elements: Jan / Feb / Mar / Apr / May / Jun / Jul / Aug / Sep / Oct / Nov / Dec /
Example: Removing spaces from a string
In the following example, split looks for 0 or more spaces followed by a semicolon followed by 0 or more spaces and, when found, removes the spaces from the string. nameList is the array returned as a result of split.

var names = "Harry Trump ;Fred Barney; Helen Rigby ; Bill Abel ;Chris Hand ";
print(names);
var re = /\s*;\s*/;
var nameList = names.split(re);
print(nameList);
This prints two lines; the first line prints the original string, and the second line prints the resulting array.

Harry Trump ;Fred Barney; Helen Rigby ; Bill Abel ;Chris Hand
Harry Trump,Fred Barney,Helen Rigby,Bill Abel,Chris Hand
Example: Returning a limited number of splits
In the following example, split looks for 0 or more spaces in a string and returns the first 3 splits that it finds.

var myString = "Hello World. How are you doing?";
var splits = myString.split(" ", 3);
print(splits);
This script displays the following:

Hello,World.,How
Example: Capturing parentheses
If separator contains capturing parentheses, matched results are returned in the array.

var myString = "Hello 1 word. Sentence number 2.";
var splits = myString.split(/(\d)/);
print(splits);
This script displays the following:

Hello ,1, word. Sentence number ,2, .
]]></documentation>
		</method>
	</object>
	<rootBlock name="Safi fuctions">
		<documentation />
		<property type="Undefined" name="undefined">
			<documentation><![CDATA[
Summary
The value undefined.

Core Global Property

Syntax
undefined

Description
undefined is a property of the global object, i.e. it is a variable in global scope.

The initial value of undefined is the primitive value undefined.

A variable that has not been assigned a value is of type undefined. A method or statement also returns undefined if the variable that is being evaluated does not have an assigned value. A function returns undefined if a value was not returned.

You can use undefined and the strict equality and inequality operators to determine whether a variable has a value. In the following code, the variable x is not defined, and the if statement evaluates to true.

var x;
if (x === undefined) {
   // these statements execute
}
if (x !== undefined) {
   // these statements do not execute
}
Note: The strict equality operator rather than the standard equality operator must be used here, because x == undefined also checks whether x is null, while strict equality doesn't. null is not equivalent to undefined. See comparison operators for details.

Alternatively, typeof can be used:

var x;
if (typeof x == 'undefined') {
   // these statements execute
}
]]>
			</documentation>
		</property>
		<property type="ANY" name="this">
			<documentation><![CDATA[
Variables local to the current object.
]]>
			</documentation>
		</property>
		<property type="ANY" name="NaN" showInRootAC="false">
			<documentation><![CDATA[
Summary
A value representing Not-A-Number.

Core Global Property

Syntax
NaN

Description
NaN is a property of the global object, i.e. it is a variable in global scope.
The initial value of NaN is Not-A-Number - the same as the value of Number.NaN.
NaN is always unequal to any other number, including NaN itself; you cannot check for the not-a-number value by comparing to Number.NaN. Use the isNaN function instead.
Several JavaScript methods (such as the Number constructor, parseFloat, and parseInt) return NaN if the value specified in the parameter can not be parsed as a number.
You might use the NaN property to indicate an error condition for your function that returns a number in case of success.
JavaScript prints the value Number.NaN as NaN.
]]>
			</documentation>
		</property>
		<method return-type="String" name="eval">
			<params>
				<parameter optional="false" type="String" name="codestring" />
			</params>
			<documentation><![CDATA[
Summary
Core Function

Evaluates a string of JavaScript code without reference to a particular object.

Syntax
eval(string [, object])

Parameters
string
A string representing a JavaScript expression, statement, or sequence of statements. The expression can include variables and properties of existing objects.
object
Non-standard  Obsolete 
An optional argument; if specified, the evaluation is restricted to the context of the specified object.
Note: The second argument of eval was removed. See bug 457068 .
Description
eval is a top-level function and is not associated with any object.

The argument of the eval function is a string. If the string represents an expression, eval evaluates the expression. If the argument represents one or more JavaScript statements, eval performs the statements. Do not call eval to evaluate an arithmetic expression; JavaScript evaluates arithmetic expressions automatically.

If you construct an arithmetic expression as a string, you can use eval to evaluate it at a later time. For example, suppose you have a variable x. You can postpone evaluation of an expression involving x by assigning the string value of the expression, say "3 * x + 2", to a variable, and then calling eval at a later point in your script.

If the argument of eval is not a string, eval returns the argument unchanged. In the following example, the String constructor is specified, and eval returns a String object rather than evaluating the string.

eval(new String("2 + 2")); // returns a String object containing "2 + 2"
eval("2 + 2");             // returns 4
You can work around this limitation in a generic fashion by using toString.

var expression = new String("2 + 2");
eval(expression.toString());
You cannot indirectly use the eval function by invoking it via a name other than eval; if you do, a runtime error might occur. For example, you should not use the following code:

var x = 2;
var y = 4;
var myEval = eval;
myEval("x + y");
Don't use eval!
eval() is a dangerous function, which executes the code it's passed with the privileges of the caller. If you run eval() with a string that could be affected by a malicious party, you may end up running malicious code on the user's machine with the permissions of your webpage / extension.

There are safe alternatives to eval() for common use-cases.

Parsing JSON
See Downloading JSON and JavaScript in extensions.

Accessing member properties
You should not use eval to convert property names into properties. Consider the following example. The getFieldName(n) function returns the name of the specified form element as a string. The first statement assigns the string value of the third form element to the variable field. The second statement uses eval to display the value of the form element.

var field = getFieldName(3);
document.write("The field named ", field, " has value of ",
   eval(field + ".value"));
However eval is not necessary here. In fact, its use here is discouraged. Instead, use the member operators, which are much faster:

var field = getFieldName(3);
document.write("The field named ", field, " has value of ",
   field[value]);
Cross-implementation compatibility
It should be noted that the second optional parameter to eval is non-standard and not supported in all JavaScript implementations; at the time of this writing, for instance, Rhino doesn't support it, nor does Safari's JavaScriptCore.

Note: The second argument of eval was removed. See bug 457068 .
To maintain compatibility across implementations, it is recommended that the second parameter to eval not be used. To achieve the same effect, the with statement may be used. So rather than using

eval(string, object);
use

with (object) {
  eval(string);
}
Examples
The following examples display output using document.write. In server-side JavaScript, you can display the same output by calling the write function instead of using document.write.

Example: Using eval
In the following code, both of the statements containing eval return 42. The first evaluates the string "x + y + 1"; the second evaluates the string "42".

var x = 2;
var y = 39;
var z = "42";
eval("x + y + 1"); // returns 42
eval(z);           // returns 42 
Example: Using eval to evaluate a string of JavaScript statements
The following example uses eval to evaluate the string str. This string consists of JavaScript statements that open an Alert dialog box and assign z a value of 42 if x is five, and assigns 0 to z otherwise. When the second statement is executed, eval will cause these statements to be performed, and it will also evaluate the set of statements and return the value that is assigned to z.

var x = 5;
var str = "if (x == 5) {alert('z is 42'); z = 42;} else z = 0; ";
document.write("<P>z is ", eval(str));
Return value
eval returns the value of the last expression evaluated.

var str = "if ( a ) { 1+1; } else { 1+2; }";
var a = true;
var b = eval(str);  // returns 2 
alert("b is : " + b);
a = false;
b = eval(str);  // returns 3
alert("b is : " + b);
]]></documentation>
		</method>
		<method return-type="Boolean" name="isFinite">
			<params>
				<parameter optional="false" type="Number" name="testnumber" />
			</params>
			<documentation><![CDATA[
Summary
Core Function

Evaluates an argument to determine whether it is a finite number.

Syntax
isFinite(number)

Parameters
number 
The number to evaluate.
Description
isFinite is a top-level function and is not associated with any object.

You can use this method to determine whether a number is a finite number. The isFinite method examines the number in its argument. If the argument is NaN, positive infinity or negative infinity, this method returns false, otherwise it returns true.

Examples
Example: Using isFinite
You can check a client input to determine whether it is a finite number.

if (isFinite(ClientInput)) {
   /* take specific steps */
}
]]></documentation>
		</method>
		<method return-type="Boolean" name="isNaN">
			<params>
				<parameter optional="false" type="Number" name="testnumber" />
			</params>
			<documentation><![CDATA[
isNaN Function
The isNaN function evaluates an argument to determine if it is "NaN" (not a number). The syntax of isNaN is:

isNaN(testValue)
where testValue is the value you want to evaluate.

The parseFloat and parseInt functions return "NaN" when they evaluate a value that is not a number. isNaN returns true if passed "NaN," and false otherwise.

The following code evaluates floatValue to determine if it is a number and then calls a procedure accordingly:

floatValue=parseFloat(toFloat)

if (isNaN(floatValue)) {
   notFloat()
} else {
   isFloat()
}
]]></documentation>
		</method>
		<method return-type="Number" name="Number" showInRootAC="false">
			<params>
				<parameter optional="false" type="ANY" name="object" />
			</params>
			<documentation><![CDATA[
Number and String Functions

Number and String Functions
The Number and String functions let you convert an object to a number or a string. The syntax of these functions is:

Number(objRef)
String(objRef)
where objRef is an object reference.

The following example converts the Date object to a readable string.

D = new Date (430054663215)
// The following returns
// "Thu Aug 18 04:37:43 GMT-0700 (Pacific Daylight Time) 1983"
x = String(D)
]]></documentation>
		</method>
		<method return-type="Number" name="parseFloat">
			<params>
				<parameter optional="false" type="String" name="string" />
			</params>
			<documentation><![CDATA[
Summary
Core Function

Parses a string argument and returns a floating point number.

Syntax
parseFloat(string)

Parameters
string 
A string that represents the value you want to parse.
Description
parseFloat is a top-level function and is not associated with any object.

parseFloat parses its argument, a string, and returns a floating point number. If it encounters a character other than a sign (+ or -), numeral (0-9), a decimal point, or an exponent, it returns the value up to that point and ignores that character and all succeeding characters. Leading and trailing spaces are allowed.

If the first character cannot be converted to a number, parseFloat returns NaN.

For arithmetic purposes, the NaN value is not a number in any radix. You can call the isNaN function to determine if the result of parseFloat is NaN. If NaN is passed on to arithmetic operations, the operation results will also be NaN.

Examples
Example: parseFloat returning a number
The following examples all return 3.14:

parseFloat("3.14");
parseFloat("314e-2");
parseFloat("0.0314E+2");
var x = "3.14";
parseFloat(x);
parseFloat("3.14more non-digit characters");
Example: parseFloat returning NaN
The following example returns NaN:

parseFloat("FF2");
]]></documentation>
		</method>
		<method return-type="Number" name="parseInt" deprecated="Use the function Number()">
			<params>
				<parameter optional="false" type="String" name="string" />
				<parameter optional="true" type="Number" name="radix" />
			</params>
			<documentation><![CDATA[
Summary
Core Function

Parses a string argument and returns an integer of the specified radix or base.

Syntax
var intValue = parseInt(string[, radix]);
Parameters
string 
A string that represents the value you want to parse.
radix 
An integer that represents the radix of the above mentioned string.
Description
parseInt is a top-level function and is not associated with any object.

Function parseInt converts its first argument to a string, parses it, and returns an integer of the specified radix (base) or NaN. For example, a radix of 10 indicates to convert to a decimal number, 8 octal, 16 hexadecimal, and so on. For radices above 10, the letters of the alphabet indicate numerals greater than 9. For example, for hexadecimal numbers (base 16), A through F are used.

If parseInt encounters a character that is not a numeral in the specified radix, it ignores it and all succeeding characters and returns the integer value parsed up to that point. parseInt truncates numbers to integer values. Leading and trailing spaces are allowed.

If radix is undefined or 0, JavaScript assumes the following:

If the input string begins with "0x", radix is 16 (hexadecimal).
If the input string begins with "0", radix is eight (octal). Although widespread, this feature is specified as implementation dependent; always use a base for consistent results.
If the input string begins with any other value, the radix is 10 (decimal).
If the first character cannot be converted to a number, parseInt returns NaN.

For arithmetic purposes, the NaN value is not a number in any radix. You can call the isNaN function to determine if the result of parseInt is NaN. If NaN is passed on to arithmetic operations, the operation results will also be NaN.

To convert number to its string literal in a particular radix use intValue.toString(radix).

Examples
Example: Using parseInt
The following examples all return 15:

parseInt(" 0xF", 16);
parseInt(" F", 16);
parseInt("17", 8);
parseInt(021, 8);
parseInt("015", 10);
parseInt(15.99, 10);
parseInt("FXX123", 16);
parseInt("1111", 2);
parseInt("15*3", 10);
parseInt("15e2", 10);
parseInt("15px", 10);
parseInt("12", 13);
The following examples all return NaN:

parseInt("Hello", 8); // Not a number at all
parseInt("546", 2);   // Digits are not valid for binary representations
The following examples all return -15:

parseInt("-F", 16);
parseInt("-0F", 16);
parseInt("-0XF", 16);
parseInt(-10, 16);
parseInt(-15.1, 10)
parseInt(" -17", 8);
parseInt(" -15", 10);
parseInt("-1111", 2);
parseInt("-15e1", 10);
parseInt("-12", 13);
The following example returns 224:

parseInt("0e0", 16);
Although it is optional, most implementations interpret a numeric string beginning with a leading '0' as octal. The following may have an octal result.

parseInt("0e0"); // 0
parseInt("08"); // 0, '8' is not an octal digit.                  
]]></documentation>
		</method>
		<method return-type="String" name="String">
			<params>
				<parameter optional="false" type="ANY" name="object" />
			</params>
			<documentation><![CDATA[
Number and String Functions

Number and String Functions
The Number and String functions let you convert an object to a number or a string. The syntax of these functions is:

Number(objRef)
String(objRef)
where objRef is an object reference.

The following example converts the Date object to a readable string.

D = new Date (430054663215)
// The following returns
// "Thu Aug 18 04:37:43 GMT-0700 (Pacific Daylight Time) 1983"
x = String(D)
]]></documentation>
		</method>
		<method return-type="Date" name="now">
			<documentation><![CDATA[
function now() returns date;        
]]></documentation>
		</method>
		<method return-type="VOID" name="debug">
			<params>
				<parameter optional="false" type="String" name="string" />
			</params>
			<documentation><![CDATA[
function debug(String);        
]]></documentation>
		</method>
		<method return-type="VOID" name="info">
			<params>
				<parameter optional="false" type="String" name="string" />
			</params>
			<documentation><![CDATA[
function info(String);        
]]></documentation>
		</method>
		<method return-type="VOID" name="error">
			<params>
				<parameter optional="false" type="String" name="string" />
			</params>
			<documentation><![CDATA[
function error(String);        
]]></documentation>
		</method>
		<method return-type="VOID" name="print">
			<params>
				<parameter optional="false" type="String" name="string" />
			</params>
			<documentation><![CDATA[
function print(String);        
]]></documentation>
		</method>
		<method return-type="VOID" name="printCurrentRequest">
			<documentation><![CDATA[
function printCurrentRequest();        
]]></documentation>
		</method>
		<method return-type="VOID" name="setGlobalVariable">
			<params>
				<parameter optional="false" type="String" name="name" />
				<parameter optional="false" type="Object" name="value" />
			</params>
			<documentation><![CDATA[        
function setGlobalVariable(name,value);
sets Global Variable       
]]></documentation>
		</method>
		<method return-type="Object" name="getGlobalVariable">
			<params>
				<parameter optional="false" type="String" name="name" />
			</params>
			<documentation><![CDATA[
function getGlobalVariable(name);
  get Global Variable    
]]></documentation>
		</method>
	</rootBlock>
</objects>