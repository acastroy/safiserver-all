/**
 * <copyright>
 * </copyright>
 *
 * $Id: TimeBasedRoutingItemProviderAdapterFactory.java,v 1.2 2008/11/14 09:53:55 zacw Exp $
 */
package com.safi.workshop.model.timeBasedRouting.provider;

import com.safi.workshop.model.timeBasedRouting.util.TimeBasedRoutingAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class TimeBasedRoutingItemProviderAdapterFactory extends TimeBasedRoutingAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
  /**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected ComposedAdapterFactory parentAdapterFactory;

  /**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected IChangeNotifier changeNotifier = new ChangeNotifier();

  /**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected Collection<Object> supportedTypes = new ArrayList<Object>();

  /**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public TimeBasedRoutingItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

  /**
	 * This keeps track of the one adapter used for all {@link com.safi.workshop.model.timeBasedRouting.TimeBasedRouting} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected TimeBasedRoutingItemProvider timeBasedRoutingItemProvider;

  /**
	 * This creates an adapter for a {@link com.safi.workshop.model.timeBasedRouting.TimeBasedRouting}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createTimeBasedRoutingAdapter() {
		if (timeBasedRoutingItemProvider == null) {
			timeBasedRoutingItemProvider = new TimeBasedRoutingItemProvider(this);
		}

		return timeBasedRoutingItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all {@link com.safi.workshop.model.timeBasedRouting.TimeItem} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected TimeItemItemProvider timeItemItemProvider;

  /**
	 * This creates an adapter for a {@link com.safi.workshop.model.timeBasedRouting.TimeItem}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createTimeItemAdapter() {
		if (timeItemItemProvider == null) {
			timeItemItemProvider = new TimeItemItemProvider(this);
		}

		return timeItemItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all {@link com.safi.workshop.model.timeBasedRouting.OccursModel} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected OccursModelItemProvider occursModelItemProvider;

  /**
	 * This creates an adapter for a {@link com.safi.workshop.model.timeBasedRouting.OccursModel}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createOccursModelAdapter() {
		if (occursModelItemProvider == null) {
			occursModelItemProvider = new OccursModelItemProvider(this);
		}

		return occursModelItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all {@link com.safi.workshop.model.timeBasedRouting.DailyOccursModel} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected DailyOccursModelItemProvider dailyOccursModelItemProvider;

  /**
	 * This creates an adapter for a {@link com.safi.workshop.model.timeBasedRouting.DailyOccursModel}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createDailyOccursModelAdapter() {
		if (dailyOccursModelItemProvider == null) {
			dailyOccursModelItemProvider = new DailyOccursModelItemProvider(this);
		}

		return dailyOccursModelItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all {@link com.safi.workshop.model.timeBasedRouting.WeeklyOccursModel} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected WeeklyOccursModelItemProvider weeklyOccursModelItemProvider;

  /**
	 * This creates an adapter for a {@link com.safi.workshop.model.timeBasedRouting.WeeklyOccursModel}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createWeeklyOccursModelAdapter() {
		if (weeklyOccursModelItemProvider == null) {
			weeklyOccursModelItemProvider = new WeeklyOccursModelItemProvider(this);
		}

		return weeklyOccursModelItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all {@link com.safi.workshop.model.timeBasedRouting.MonthlyOccursModel} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected MonthlyOccursModelItemProvider monthlyOccursModelItemProvider;

  /**
	 * This creates an adapter for a {@link com.safi.workshop.model.timeBasedRouting.MonthlyOccursModel}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createMonthlyOccursModelAdapter() {
		if (monthlyOccursModelItemProvider == null) {
			monthlyOccursModelItemProvider = new MonthlyOccursModelItemProvider(this);
		}

		return monthlyOccursModelItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all {@link com.safi.workshop.model.timeBasedRouting.TimeRange} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected TimeRangeItemProvider timeRangeItemProvider;

  /**
	 * This creates an adapter for a {@link com.safi.workshop.model.timeBasedRouting.TimeRange}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createTimeRangeAdapter() {
		if (timeRangeItemProvider == null) {
			timeRangeItemProvider = new TimeRangeItemProvider(this);
		}

		return timeRangeItemProvider;
	}

  /**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

  /**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

  /**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

  /**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

  /**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

  /**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

  /**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public void dispose() {
		if (timeBasedRoutingItemProvider != null) timeBasedRoutingItemProvider.dispose();
		if (timeItemItemProvider != null) timeItemItemProvider.dispose();
		if (occursModelItemProvider != null) occursModelItemProvider.dispose();
		if (dailyOccursModelItemProvider != null) dailyOccursModelItemProvider.dispose();
		if (weeklyOccursModelItemProvider != null) weeklyOccursModelItemProvider.dispose();
		if (monthlyOccursModelItemProvider != null) monthlyOccursModelItemProvider.dispose();
		if (timeRangeItemProvider != null) timeRangeItemProvider.dispose();
	}

}
